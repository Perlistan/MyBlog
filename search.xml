<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C-Shard 多线程/异步</title>
    <url>/MyBlog/2020/06/24/C-Shard-Thread/</url>
    <content><![CDATA[<blockquote>
<p>多线程与异步学习总结</p>
</blockquote>
<a id="more"></a>

<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><ul>
<li>单线程应用：只在主线程运行</li>
<li>多线程应用：在一个进程（主线程）中调用多个线程</li>
<li>在单核服务器上线程会以时间块分段执行，在多核服务器上线程可以并行执行</li>
<li>线程一旦结束则无法重启</li>
<li>Join 可以等待线程结束才继续运行，如果附带参数则代表等待 N 秒后还未运行完则跳出</li>
<li>Sleep 会暂停当前线程，如果传入参数为 0，则放弃当前线程</li>
<li>Yield 也会暂停当前线程，但只会调用同一 CPU 上的其它线程</li>
<li>花费大部分时间等待某事发生称为 I/O-Bound</li>
<li>花费大部分时间用 CPU 计算的工作叫 CPU-Bound</li>
<li>不同线程影响同一变量称为线程安全</li>
<li>子线程异常无法被主线程捕获</li>
<li>默认情况下创建的是前台线程，前台线程需要等待运行；后台线程不需要等待，生命周期随主线程的终止而终止</li>
</ul>
<h2 id="线程的运行流程"><a href="#线程的运行流程" class="headerlink" title="线程的运行流程"></a>线程的运行流程</h2><p><img src="https://tagost.aiur.site/blog-imgs/thread/1.png" alt="线程的运行流程"></p>
<h2 id="关于匿名委托的闭包变量传递"><a href="#关于匿名委托的闭包变量传递" class="headerlink" title="关于匿名委托的闭包变量传递"></a>关于匿名委托的闭包变量传递</h2><ul>
<li>在匿名委托中，因为方法是闭包的，所以引入的局部变量会被编译为成员变量。如果是以参数形式传入则不会</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool done &#x3D; false;</span><br><span class="line"></span><br><span class="line">var str &#x3D; &quot;asd&quot;;</span><br><span class="line"></span><br><span class="line">Action&lt;string&gt; threadStart &#x3D; (str) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 局部变量</span><br><span class="line">    var lee &#x3D; str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (!done)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(lee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">threadStart(str);</span><br></pre></td></tr></table></figure>

<p><img src="https://tagost.aiur.site/blog-imgs/thread/2.png" alt="IL"></p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><ul>
<li>一般使用 lock 关键字来实现线程安全</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static readonly object _lock &#x3D; new object();</span><br><span class="line"></span><br><span class="line">void Get()</span><br><span class="line">&#123;</span><br><span class="line">    lock(_lock)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C-Shard</category>
      </categories>
  </entry>
  <entry>
    <title>C-Shard 语言基础2</title>
    <url>/MyBlog/2020/06/05/C-Shard-Nutshell-2/</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
      <categories>
        <category>《C-Shard 核心技术指南》笔记</category>
      </categories>
  </entry>
  <entry>
    <title>数据库索引</title>
    <url>/MyBlog/2020/06/12/SQL-Index/</url>
    <content><![CDATA[<blockquote>
<p>数据库索引相关</p>
</blockquote>
<a id="more"></a>

<h1 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h1><p>众所周知，索引是关系型数据库中给数据库表中一列或多列的值排序后的存储结构，SQL 的主流索引结构有 B+ 树以及 Hash 结构，聚集索引以及非聚集索引用的是 B+树索引。这篇文章会总结 SQL Server 以及 MySQL 的 InnoDB 和 MyISAM 两种 SQL 的索引</p>
<ul>
<li><p>SQL Sever 索引类型有：唯一索引，主键索引，聚集索引，非聚集索引</p>
</li>
<li><p>MySQL 索引类型有：唯一索引，主键（聚集）索引，非聚集索引，全文索引</p>
</li>
</ul>
<h1 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h1><ul>
<li><p>数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引</p>
</li>
<li><p>一个表就像新华字典，聚集索引就像是拼音目录，而每个字存放的页码就是我们的数据物理地址</p>
</li>
<li><p>如果要查询一个字，我们只需要查询该字对应在新华字典拼音目录对应的页码，就可以查询到对应字所在的位置</p>
</li>
<li><p>而拼音目录对应的 A-Z 的字顺序，和新华字典实际存储的字的顺序 A-Z 也是一样的，如果我们中文新出了一个字，拼音开头第一个是 B，那么他插入的时候也要按照拼音目录顺序插入到 A 字的后面</p>
</li>
</ul>
<h2 id="聚集索引实际存放的示意图"><a href="#聚集索引实际存放的示意图" class="headerlink" title="聚集索引实际存放的示意图"></a>聚集索引实际存放的示意图</h2><p><img src="https://tagost.aiur.site/blog-imgs/sql-index/1.png" alt="聚集索引图"></p>
<ul>
<li>从上图可以看出聚集索引的好处了，索引的叶子节点就是对应的数据节点（MySQL 的 MyISAM 除外，此存储引擎的聚集索引和非聚集索引只多了个唯一约束，其他没什么区别），可以直接获取到对应的全部列的数据，而非聚集索引在索引没有覆盖到对应的列的时候需要进行二次查询，后面会详细讲。<strong>因此在查询方面，聚集索引的速度往往会更占优势</strong></li>
</ul>
<h2 id="创建聚集索引"><a href="#创建聚集索引" class="headerlink" title="创建聚集索引"></a>创建聚集索引</h2><ul>
<li><p>如果不创建索引，系统会自动创建一个隐藏列作为表的聚集索引</p>
</li>
<li><p>创建表的时候指定主键（注意：SQL Sever 默认主键为聚集索引，也可以指定为非聚集索引，而 MySQL 里主键就是聚集索引）</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">	<span class="keyword">name</span> <span class="keyword">nvarchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建表后添加聚集索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL Server</span></span><br><span class="line"><span class="keyword">create</span> clustered <span class="keyword">index</span> clustered_index <span class="keyword">on</span> table_name(colum_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> primary <span class="keyword">key</span>(colum_name)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>值得注意的是，最好还是在创建表的同时添加聚集索引，由于聚集索引的物理顺序上的特殊性，因此如果之后再创建索引会导致索引列的排序变动，此时非常耗费时间及性能</strong></li>
</ul>
<h1 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h1><ul>
<li><p>该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引</p>
</li>
<li><p>除了聚集索引以外的索引都是非聚集索引，只是人们想细分一下非聚集索引，分成普通索引、唯一索引、全文索引</p>
</li>
<li><p>如果非要把非聚集索引类比成现实生活中的东西，那么非聚集索引就像新华字典的偏旁字典，他结构顺序与实际存放顺序不一定一致</p>
</li>
</ul>
<h2 id="非聚集索引示意图"><a href="#非聚集索引示意图" class="headerlink" title="非聚集索引示意图"></a>非聚集索引示意图</h2><p><img src="https://tagost.aiur.site/blog-imgs/sql-index/2.png" alt="非聚集索引"></p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>TCP/IP 学习总结</title>
    <url>/MyBlog/2020/06/10/Web-TCPIP/</url>
    <content><![CDATA[<blockquote>
<p>TCP/IP 学习总结</p>
</blockquote>
<a id="more"></a>

<h1 id="OSI-七层协议，实际常用的就只有【应用、传输、网络、链路】层"><a href="#OSI-七层协议，实际常用的就只有【应用、传输、网络、链路】层" class="headerlink" title="OSI 七层协议，实际常用的就只有【应用、传输、网络、链路】层"></a>OSI 七层协议，实际常用的就只有【应用、传输、网络、链路】层</h1><p><img src="https://tagost.aiur.site/blog-imgs/tcp/1.png" alt="七层协议"></p>
<h1 id="一句话攻略"><a href="#一句话攻略" class="headerlink" title="一句话攻略"></a>一句话攻略</h1><ul>
<li>TCP/IP 是众多网络协议中的统称</li>
<li>通讯是双向的，不可能出现第四层跟第五层通信</li>
<li>网络发现是基于 IP 地址而不是物理地址；数据转发才是基于物理地址</li>
<li>IPV4 网络层通过与子网掩码进行二进制运算获取网络号</li>
<li>应用层、表示层、会话层已经合并，一般指 Web 应用</li>
<li>HTTP 是协议，约束报文头规则</li>
</ul>
<h1 id="什么是-TCP"><a href="#什么是-TCP" class="headerlink" title="什么是 TCP"></a>什么是 TCP</h1><ul>
<li>TCP 是可靠的链接传输协议</li>
<li>三次握手、数据传输、四次挥手</li>
<li>所有请求都是从应用层到物理层来回往返交换</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">客户端应用层 -&gt; 传输层 -&gt; 网络层 -&gt; 链路层 -&gt; 物理层 到服务端物理层 -&gt; 链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用层</span><br></pre></td></tr></table></figure>

<ul>
<li>注意三次握手攻击，客户端故意不返回第三次 ACK 给服务端造成一直占用资源</li>
</ul>
<h1 id="什么是-Socket"><a href="#什么是-Socket" class="headerlink" title="什么是 Socket"></a>什么是 Socket</h1><ul>
<li>一种套接字：客户端 IP + 端口：服务端 IP + 端口</li>
<li>IP 是为了找到服务器，端口号是为了找到指定的程序</li>
<li>IP 是唯一的，端口上限是 65535，所以一个 IP 最多建立 65535 条链接</li>
</ul>
<h1 id="物理地址、IP-地址、端口地址"><a href="#物理地址、IP-地址、端口地址" class="headerlink" title="物理地址、IP 地址、端口地址"></a>物理地址、IP 地址、端口地址</h1><ul>
<li>物理地址：一般指网卡硬件地址，硬件码唯一</li>
<li>IP 地址：网络地址，外网 / 局域网 IP，网络唯一</li>
<li>端口地址：同一台电脑上唯一</li>
</ul>
<h1 id="单播、多播、广播"><a href="#单播、多播、广播" class="headerlink" title="单播、多播、广播"></a>单播、多播、广播</h1><ul>
<li>主要针对物理地址和 IP 地址</li>
<li>单播：一个接收者，类似 P2P</li>
<li>多播：多个接收者，类似群聊 224 开头</li>
<li>广播：面向所有人，类似游戏公告 255.255.255.255</li>
</ul>
<h1 id="TCP-IP-版本"><a href="#TCP-IP-版本" class="headerlink" title="TCP/IP 版本"></a>TCP/IP 版本</h1><ul>
<li>IPV4：地址空间不足和 32 位的低效率</li>
<li>IPV5：基于七层协议，没有投入使用</li>
<li>IPV6：扩大了地址空间，现在有 128 位</li>
</ul>
<h1 id="局域网-LAN"><a href="#局域网-LAN" class="headerlink" title="局域网 LAN"></a>局域网 LAN</h1><ul>
<li>允许一些电脑在局限的 IP 范围内通信</li>
<li>目前的局域网都是基于以太网实现</li>
<li>以太网（Ethernet）：CSMA/CD，根据信道是否空闲发送数据，速率 10M、100M、1000M、10G</li>
</ul>
<h1 id="一般接口请求过程"><a href="#一般接口请求过程" class="headerlink" title="一般接口请求过程"></a>一般接口请求过程</h1><h2 id="1、三次握手"><a href="#1、三次握手" class="headerlink" title="1、三次握手"></a>1、三次握手</h2><ul>
<li>第一次：客户端发送一条 SYN 数据请求服务端</li>
<li>第二次：服务端回报 SYN + ACK 数据给客户端</li>
<li>第三次：客户端收到后返回 ACK 到服务端</li>
</ul>
<h2 id="2、数据通信"><a href="#2、数据通信" class="headerlink" title="2、数据通信"></a>2、数据通信</h2><ul>
<li>客户端发送 Get / Post 等 HTTP 协议</li>
<li>回报数据会分批接收</li>
<li>如今的浏览器会自动开启 HTTP-Alive 保持链接</li>
</ul>
<h2 id="3、四次挥手"><a href="#3、四次挥手" class="headerlink" title="3、四次挥手"></a>3、四次挥手</h2><ul>
<li>端口是有限的，不释放就会让服务器崩溃，必须双方一起释放</li>
<li>第一次：客户端发送 FIN 到服务端</li>
<li>第二次：服务端回报 FIN + ACK 给客户端</li>
<li>第三次：服务端发送 FIN 到客户端</li>
<li>第四次：客户端回报 ACK 给服务端</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>C-Shard 语言基础</title>
    <url>/MyBlog/2020/06/05/C-Shard-Nutshell-1/</url>
    <content><![CDATA[<blockquote>
<p>语言基础章节的学习总结</p>
</blockquote>
<a id="more"></a>

<h1 id="一句话攻略"><a href="#一句话攻略" class="headerlink" title="一句话攻略"></a>一句话攻略</h1><ul>
<li>必须将重复的代码段封装成一个方法</li>
<li>main 方法可以返回 int 类型，非 0 返回值代表一个错误</li>
<li>main 方法可以接收字符串数组为参数</li>
<li>如果需要使用关键字作为变量名需要在前面加 @ 符号</li>
<li>C# 中所有值都是某种类型的实例</li>
<li>值类型实例总是复制传递</li>
<li>引用类型实例存在堆，引用地址存在栈</li>
<li>decimal 不是原生数据类型</li>
<li>整数类型默认以 int 类型进行计算；浮点数默认类型是 double</li>
<li>数组中的元素总是存在连续的内存块中；数组是引用类型</li>
<li>表达式本质上是值，最简单的表达式是常量和变量</li>
<li>二元运算符（一般指数学运算）是左结合；赋值、lambda、null 合并运算和条件运算符都是右结合</li>
<li>使用 ref out 将值类型参数变成引用传递</li>
</ul>
<hr>
<h1 id="精度转换问题"><a href="#精度转换问题" class="headerlink" title="精度转换问题"></a>精度转换问题</h1><ul>
<li>值类型小转大属于隐式转换，不会有损失；反之则需要显式转换且有损失；当一个非常大的 long 转换为 double 还是会有精度损失；整数比浮点数小，但精度比浮点数高</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">12345678901234567L</span>;</span><br><span class="line"><span class="keyword">double</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际结果</span></span><br><span class="line">b = <span class="number">12345678901234568</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="一个类包含方法成员与数据成员"><a href="#一个类包含方法成员与数据成员" class="headerlink" title="一个类包含方法成员与数据成员"></a>一个类包含方法成员与数据成员</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 数据成员</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法成员</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> UserInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Power</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="实例成员与静态成员"><a href="#实例成员与静态成员" class="headerlink" title="实例成员与静态成员"></a>实例成员与静态成员</h1><p><strong>执行顺序：</strong></p>
<ol>
<li>静态成员</li>
<li>静态构造方法</li>
<li>实例成员</li>
<li>构造方法</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 实例成员</span></span><br><span class="line"><span class="keyword">string</span> Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员，静态成员全局共享</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="值类型占用的内存大小就是其字段类型大小的总和"><a href="#值类型占用的内存大小就是其字段类型大小的总和" class="headerlink" title="值类型占用的内存大小就是其字段类型大小的总和"></a>值类型占用的内存大小就是其字段类型大小的总和</h1><ul>
<li>共 12 byte，但 CLR 会以 8 byte 为参考乘字段的个数，最终大小为 16 byte</li>
<li>最小 1 byte，不足 1 byte 的当 1 byte 用，例如 bool = 1 bit</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4 byte</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8 byte</span></span><br><span class="line"><span class="keyword">long</span> b;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="checked-整数溢出检查"><a href="#checked-整数溢出检查" class="headerlink" title="checked 整数溢出检查"></a>checked 整数溢出检查</h1><ul>
<li>值类型溢出后会跳转到最大或最小值</li>
<li>使用 checked 会检查指定代码，如果溢出则报错</li>
<li>使用 unchecked 取消检查溢出（默认）</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="keyword">int</span>.MinValue;</span><br><span class="line">++a; <span class="comment">// a 等于 int.MaxValue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查溢出</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">checked</span></span><br><span class="line">&#123;</span><br><span class="line">  c = a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮点类型无法检查溢出，它们为正负无穷大</li>
<li>一个 NaN 永远不等于其它值或其它 NaN 值，只能使用 IsNaN 判断；使用 Equals 判断两者 NaN 却是相等的</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.0</span> / <span class="number">0.0</span> = <span class="comment">// 正无穷</span></span><br><span class="line"><span class="number">-1.0</span> / <span class="number">0.0</span> = <span class="comment">// 负无穷</span></span><br><span class="line"><span class="number">1.0</span> / <span class="number">-0.0</span> = <span class="comment">// 负无穷</span></span><br><span class="line"><span class="number">-1.0</span> / <span class="number">0.0</span> = <span class="comment">// 正无穷</span></span><br><span class="line"><span class="number">0.0</span> / <span class="number">0.0</span> = <span class="comment">// NaN</span></span><br><span class="line">(<span class="number">1.0</span> / <span class="number">0.0</span>) - (<span class="number">1.0</span> / <span class="number">0.0</span>) = <span class="comment">// NaN（无穷减无穷）</span></span><br></pre></td></tr></table></figure>

<ul>
<li>float double 在内部都是用基于 2 来表示数值，只有基于 2 的数值才能精确表示；而 decimal 基于 10，它能精确表示基于 10、2、5 的数值，但 double decimal 都不能精确表示基于 10 的循环小数，这将影响值对比操作</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decimal</span> m = <span class="number">1</span>m / <span class="number">6</span>m <span class="comment">// 0.1666666666666666667M</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span> / <span class="number">6.0</span> <span class="comment">// 0.166666666666</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h1><ul>
<li>栈是存储局部变量和方法参数的内存；栈会在方法进入或退出时增加或减少，俗称进入和弹出操作</li>
<li>栈是用来存放在方法中定义的一些基本类型变量和对象的引用变量；如果值类型是在方法内部创建（局部变量），则跟随方法入栈</li>
<li>堆是保存对象实例的内存；新创建的对象会存在堆上并返回其引用地址，只要该地址不再被任何对象引用则被 GC 回收</li>
<li>堆是用来存放由 new 创建的对象和数组，即动态申请的内存都存放在堆；如果值类型是引用类型的成员变量（例如在 new User() 里面有一个 public int a），也一起存储在堆上</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此例来源于网络</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> PointX &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> PointY &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">StartProgram</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">double</span> pointX = <span class="number">100.1</span>;</span><br><span class="line">      InitialPoint(pointX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InitialPoint</span>(<span class="params"><span class="keyword">double</span> pointX</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> point = <span class="keyword">new</span> Point();</span><br><span class="line">      point.PointX = pointX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例分析：假设主线程从 Start() 进入执行，我们分析一下方法中的变量在内存中的大致分配情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先将 Start() 方法指令压入栈底，然后压入局部变量 pointX ；紧接着将 InitialPoint() 方法压入栈底，形参 pointX</span></span><br><span class="line"><span class="comment">// 压入栈底，在堆上实例化 Point 对象（包括其成员变量 PointX 和 PointY)，并在栈上创建 point 变量指向堆上的 Point 对象</span></span><br><span class="line"><span class="comment">// 最后给成员变量 PointX 赋值</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="静态字段也会被分配到堆中，但其会一直存活到应用程序域结束"><a href="#静态字段也会被分配到堆中，但其会一直存活到应用程序域结束" class="headerlink" title="静态字段也会被分配到堆中，但其会一直存活到应用程序域结束"></a>静态字段也会被分配到堆中，但其会一直存活到应用程序域结束</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ABC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">string</span> = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>《C-Shard 核心技术指南》笔记</category>
      </categories>
  </entry>
  <entry>
    <title>【MSSQL】常用语句</title>
    <url>/MyBlog/2020/06/08/MSSQL-Command-1/</url>
    <content><![CDATA[<blockquote>
<p>记录了常用的 MSSQL 语句方便开发</p>
</blockquote>
<a id="more"></a>

<h1 id="ROW-NUMBER-适用于-2008-及以下的版本"><a href="#ROW-NUMBER-适用于-2008-及以下的版本" class="headerlink" title="ROW_NUMBER 适用于 2008 及以下的版本"></a>ROW_NUMBER 适用于 2008 及以下的版本</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    UserName,</span><br><span class="line">    ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> UserName) <span class="keyword">as</span> <span class="keyword">row</span></span><br><span class="line">    <span class="keyword">from</span> T_UserInfo</span><br><span class="line">) <span class="keyword">main</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="keyword">row</span></span><br><span class="line"><span class="keyword">between</span> <span class="number">50</span> <span class="keyword">and</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h1 id="OFFSET，FETCH-NEXT-适用于-2012-及以上的版本"><a href="#OFFSET，FETCH-NEXT-适用于-2012-及以上的版本" class="headerlink" title="OFFSET，FETCH NEXT 适用于 2012 及以上的版本"></a>OFFSET，FETCH NEXT 适用于 2012 及以上的版本</h1><ul>
<li>offset 跳过 n 条数据，可单独使用</li>
<li>fetch next 是选择 n 行数据</li>
<li>注意大数据下先筛选后分页</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">UserName</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> UserName</span><br><span class="line"><span class="keyword">offset</span> <span class="number">1000</span> <span class="keyword">rows</span> <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="number">50</span> <span class="keyword">rows</span> <span class="keyword">only</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>【MSSQL】varchar 自动增长列</title>
    <url>/MyBlog/2020/06/08/MSSQL-QA-1/</url>
    <content><![CDATA[<blockquote>
<p>关于 MSSQL 字符串自动增长列连续 ID</p>
</blockquote>
<a id="more"></a>

<h1 id="不建议用数据库做逻辑数据"><a href="#不建议用数据库做逻辑数据" class="headerlink" title="不建议用数据库做逻辑数据"></a>不建议用数据库做逻辑数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--编号总共12位，由字母DC+年月+4位数字编号组成（如DC2017070001），必须唯一，在新增时自动生成，数字编号自动增长</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> F_GetUUID()</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--变量</span></span><br><span class="line"><span class="keyword">declare</span> @nowtime datetime</span><br><span class="line"><span class="keyword">declare</span> @newUUID <span class="built_in">varchar</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @nowtime = <span class="keyword">GETDATE</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">--1、获取当前年份并转换为varchar</span></span><br><span class="line"><span class="comment">--2、获取月份（因为MONTH获取的是没有0的月所以要进行截取）</span></span><br><span class="line"><span class="comment">--3、获取Test表内的最大值ID并截取右4位，如果为NULL则返回0。之后与10000相加为4位数字编号原值并加1变成新ID，之后再截取右4位得到新ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">@newUUID = <span class="string">'DC'</span>+<span class="keyword">CONVERT</span>(<span class="built_in">varchar</span>,<span class="keyword">YEAR</span>(@nowtime))+<span class="keyword">RIGHT</span>(<span class="number">100</span>+<span class="keyword">MONTH</span>(@nowtime),<span class="number">2</span>)+<span class="keyword">RIGHT</span>(<span class="number">10000</span>+<span class="keyword">ISNULL</span>(<span class="keyword">RIGHT</span>(<span class="keyword">max</span>(<span class="keyword">uuid</span>),<span class="number">4</span>),<span class="number">0</span>)+<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> @newUUID</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--设置列默认值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">Test</span></span><br><span class="line"><span class="keyword">add</span> <span class="keyword">default</span> ([dbo].F_GetUUID()) <span class="keyword">for</span> <span class="keyword">uuID</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>【MSSQL】解决 SQL Server 服务器重启后主键自动增长列倍增问题</title>
    <url>/MyBlog/2020/06/08/MSSQL-QA-2/</url>
    <content><![CDATA[<blockquote>
<p>关于 MSSQL 自动增长列倍增 ID 的问题</p>
</blockquote>
<a id="more"></a>

<h1 id="解决使用-SQL-Server-2012-时出现主键-ID-自动增长列从-1-2-3-变成-1001-1002-1003-的情况"><a href="#解决使用-SQL-Server-2012-时出现主键-ID-自动增长列从-1-2-3-变成-1001-1002-1003-的情况" class="headerlink" title="解决使用 SQL Server 2012 时出现主键 ID 自动增长列从 1 2 3 变成 1001 1002 1003 的情况"></a>解决使用 SQL Server 2012 时出现主键 ID 自动增长列从 1 2 3 变成 1001 1002 1003 的情况</h1><ul>
<li>注意：重新启动后第一次添加还是会倍增，可以用 Truncate table xxx 清除所有数据同时重置主键索引</li>
</ul>
<blockquote>
<p>选择服务器</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/1.png" alt="选择服务器"></p>
<blockquote>
<p>点击属性</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/2.png" alt="点击属性"></p>
<blockquote>
<p>在启动参数中输入 -t272</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/3.png" alt="在启动参数中输入-t272"></p>
<blockquote>
<p>重新启动</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/4.png" alt="重新启动"></p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>【MySQL】常用语句</title>
    <url>/MyBlog/2020/06/05/MySQL-Command-1/</url>
    <content><![CDATA[<blockquote>
<p>记录了常用的 MySQL 语句方便开发</p>
</blockquote>
<a id="more"></a>

<h1 id="如果两张表的字段一致，并且希望插入全部数据"><a href="#如果两张表的字段一致，并且希望插入全部数据" class="headerlink" title="如果两张表的字段一致，并且希望插入全部数据"></a>如果两张表的字段一致，并且希望插入全部数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">select</span> * <span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure>

<h1 id="导入指定字段"><a href="#导入指定字段" class="headerlink" title="导入指定字段"></a>导入指定字段</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(<span class="keyword">name</span>) <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure>

<h1 id="导入目标表中不存在的记录"><a href="#导入目标表中不存在的记录" class="headerlink" title="导入目标表中不存在的记录"></a>导入目标表中不存在的记录</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">name</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> table2</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> table1</span><br><span class="line">    <span class="keyword">where</span> table1.id=table2.id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><ul>
<li>limit 前是跳过多少数据，后是提取多少数据</li>
<li>注意先筛选后分页</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">3</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
</search>
