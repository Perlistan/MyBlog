<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Asp.Net Fx / Core 全局异常处理实例</title>
    <url>/MyBlog/2020/07/07/Asp.Net-%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="Asp-net-Framework-MVC"><a href="#Asp-net-Framework-MVC" class="headerlink" title="Asp.net Framework MVC"></a>Asp.net Framework MVC</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先继承 HandleError 特性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyGlobalException</span> : <span class="title">HandleErrorAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 重写 OnException 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 实现业务</span></span><br><span class="line">        filterContext.Result = <span class="keyword">new</span> JsonResult</span><br><span class="line">        &#123;</span><br><span class="line">            ContentType = HttpStatusCode.BadRequest.ToString(),</span><br><span class="line">            Data = <span class="keyword">new</span> &#123; msg = filterContext.Exception.Message &#125;,</span><br><span class="line">            JsonRequestBehavior = JsonRequestBehavior.AllowGet</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        filterContext.ExceptionHandled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局过滤器，如果不存在此文件自己创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span>(<span class="params">GlobalFilterCollection filters</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        filters.Add(<span class="keyword">new</span> MyGlobalException());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后在 Global Application_Start 添加过滤器</span></span><br><span class="line">FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br></pre></td></tr></table></figure>
<h1 id="Asp-net-Framework-WebAPI"><a href="#Asp-net-Framework-WebAPI" class="headerlink" title="Asp.net Framework WebAPI"></a>Asp.net Framework WebAPI</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承指定类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyGlobalException</span> : <span class="title">ExceptionHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 重写 Handle</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">ExceptionHandlerContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 实现业务</span></span><br><span class="line">        context.Result = <span class="keyword">new</span> ResponseMessageResult(context.Request.CreateResponse(System.Net.HttpStatusCode.NotFound));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 WebConfig 中添加</span></span><br><span class="line">config.Services.Replace(<span class="keyword">typeof</span>(IExceptionHandler), <span class="keyword">new</span> MyGlobalException());</span><br></pre></td></tr></table></figure>
<h1 id="Asp-Net-Core"><a href="#Asp-Net-Core" class="headerlink" title="Asp.Net Core"></a>Asp.Net Core</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个中间件类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyExceptionMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyExceptionMiddleware</span>(<span class="params">RequestDelegate requestDelegate</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._next = requestDelegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获所有下层中间件引发的异常</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext httpContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next(httpContext);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(RegexException ane)</span><br><span class="line">        &#123;</span><br><span class="line">            httpContext.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">            <span class="keyword">await</span> httpContext.Response.WriteAsync(JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; msg = ane.Message &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            httpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">            <span class="comment">// logger write</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后在 StartUP Configure 最上面添加</span></span><br><span class="line">app.UseMiddleware&lt;MyExceptionMiddleware&gt;();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Asp.Net</category>
      </categories>
  </entry>
  <entry>
    <title>【Centos7】Docker</title>
    <url>/MyBlog/2020/07/25/Linux-Docker/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h1><ul>
<li>它类似沙盒，沙盒里面放着一堆集装箱，每个集装箱相互独立互不影响，拥有独立的运行环境</li>
<li>Docker 主要解决了运维问题，它能将应用所需环境都封装起来打包成一个镜像，然后交给 Docker 沙盒托管，减少运维成本</li>
<li>实现 DevOps 完成代码自动测试、发布、打包为镜像最后发布到服务器的 CI/CD 流程</li>
<li>Docker 基于 Golang 开发</li>
<li>能快速的迭代运行环境与应用版本，只需要修改配置文件批量更新即可</li>
<li>支持横向扩展，例如高并发的情况下业务后端处理不过来时可以一键开启 N 个相同的业务镜像进行负载均衡</li>
</ul>
<h1 id="Docker-与-VM-的区别"><a href="#Docker-与-VM-的区别" class="headerlink" title="Docker 与 VM 的区别"></a>Docker 与 VM 的区别</h1><ul>
<li><strong>Docker 是使用 Linux 中的 namespace 实现的</strong></li>
<li>VM 过于笨重，使用硬件模拟出一台虚拟主机，占用物理机资源</li>
<li>Docker 直接使用物理机资源运行镜像，镜像大小很小</li>
<li>性能上使用 VM 可能开 3 个就卡，Docker 可以开 30 个不卡</li>
<li>Linux 111 服务器上可以做到开启几十个镜像服务，相同配置下用 Windows 服务器开一个 VM 都卡死</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>MSSQL 常用语句</title>
    <url>/MyBlog/2020/06/08/MSSQL-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="ROW-NUMBER-适用于-2008-及以下的版本"><a href="#ROW-NUMBER-适用于-2008-及以下的版本" class="headerlink" title="ROW_NUMBER 适用于 2008 及以下的版本"></a>ROW_NUMBER 适用于 2008 及以下的版本</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    UserName,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> UserName) <span class="keyword">as</span> <span class="type">row</span></span><br><span class="line">    <span class="keyword">from</span> T_UserInfo</span><br><span class="line">) main</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="type">row</span></span><br><span class="line"><span class="keyword">between</span> <span class="number">50</span> <span class="keyword">and</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<h1 id="OFFSET，FETCH-NEXT-适用于-2012-及以上的版本"><a href="#OFFSET，FETCH-NEXT-适用于-2012-及以上的版本" class="headerlink" title="OFFSET，FETCH NEXT 适用于 2012 及以上的版本"></a>OFFSET，FETCH NEXT 适用于 2012 及以上的版本</h1><ul>
<li>offset 跳过 n 条数据，可单独使用</li>
<li>fetch next 是选择 n 行数据</li>
<li>注意大数据下先筛选后分页</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">UserName</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> UserName</span><br><span class="line"><span class="keyword">offset</span> <span class="number">1000</span> <span class="keyword">rows</span> <span class="keyword">fetch</span> next <span class="number">50</span> <span class="keyword">rows</span> <span class="keyword">only</span></span><br></pre></td></tr></table></figure>
<h1 id="读写分离时复制功能登录失败问题"><a href="#读写分离时复制功能登录失败问题" class="headerlink" title="读写分离时复制功能登录失败问题"></a>读写分离时复制功能登录失败问题</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先查询出本地计算机名和数据库名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@SERVERNAME</span></span><br><span class="line"><span class="keyword">select</span> serverproperty(<span class="string">&#x27;servername&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 同步两者名字即可使用计算机名登录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> sp_dropserver <span class="string">&#x27;DESKTOP-7RNV68B&#x27;</span></span><br><span class="line"><span class="keyword">exec</span> sp_addserver <span class="string">&#x27;TAGOST&#x27;</span>,<span class="string">&#x27;local&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="Varchar-自动增长列"><a href="#Varchar-自动增长列" class="headerlink" title="Varchar 自动增长列"></a>Varchar 自动增长列</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--编号总共12位，由字母DC+年月+4位数字编号组成（如DC2017070001），必须唯一，在新增时自动生成，数字编号自动增长</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> F_GetUUID()</span><br><span class="line"><span class="keyword">returns</span> <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@nowtime</span> datetime</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@newUUID</span> <span class="type">varchar</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@nowtime</span> <span class="operator">=</span> GETDATE()</span><br><span class="line"></span><br><span class="line"><span class="comment">--1、获取当前年份并转换为varchar</span></span><br><span class="line"><span class="comment">--2、获取月份（因为MONTH获取的是没有0的月所以要进行截取）</span></span><br><span class="line"><span class="comment">--3、获取Test表内的最大值ID并截取右4位，如果为NULL则返回0。之后与10000相加为4位数字编号原值并加1变成新ID，之后再截取右4位得到新ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="variable">@newUUID</span> <span class="operator">=</span> <span class="string">&#x27;DC&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">varchar</span>,<span class="keyword">YEAR</span>(<span class="variable">@nowtime</span>))<span class="operator">+</span><span class="keyword">RIGHT</span>(<span class="number">100</span><span class="operator">+</span><span class="keyword">MONTH</span>(<span class="variable">@nowtime</span>),<span class="number">2</span>)<span class="operator">+</span><span class="keyword">RIGHT</span>(<span class="number">10000</span><span class="operator">+</span>ISNULL(<span class="keyword">RIGHT</span>(<span class="built_in">max</span>(uuid),<span class="number">4</span>),<span class="number">0</span>)<span class="operator">+</span><span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">from</span> Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">@newUUID</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置列默认值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Test</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">default</span> ([dbo].F_GetUUID()) <span class="keyword">for</span> uuID</span><br><span class="line">go</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MSSQL</category>
      </categories>
  </entry>
  <entry>
    <title>解决服务器重启后主键自动增长列倍增问题</title>
    <url>/MyBlog/2020/06/08/MSSQL-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-1/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="解决主键-ID-自动增长列从-1-2-3-变成-1001-1002-1003-的情况"><a href="#解决主键-ID-自动增长列从-1-2-3-变成-1001-1002-1003-的情况" class="headerlink" title="解决主键 ID 自动增长列从 1 2 3 变成 1001 1002 1003 的情况"></a>解决主键 ID 自动增长列从 1 2 3 变成 1001 1002 1003 的情况</h1><ul>
<li>注意：重新启动后第一次添加还是会倍增，可以用 Truncate table xxx 清除所有数据同时重置主键索引</li>
</ul>
<blockquote>
<p>选择服务器</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/1.png" alt="选择服务器"></p>
<blockquote>
<p>点击属性</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/2.png" alt="点击属性"></p>
<blockquote>
<p>在启动参数中输入 -t272</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/3.png" alt="在启动参数中输入-t272"></p>
<blockquote>
<p>重新启动</p>
</blockquote>
<p><img src="https://tagost.aiur.site/blog-imgs/mssql-qa-2/4.png" alt="重新启动"></p>
]]></content>
      <categories>
        <category>MSSQL</category>
      </categories>
  </entry>
  <entry>
    <title>语言基础</title>
    <url>/MyBlog/2020/06/05/CShard-Nutshell-1/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="一句话攻略"><a href="#一句话攻略" class="headerlink" title="一句话攻略"></a>一句话攻略</h1><ul>
<li>必须将重复的代码段封装成一个方法</li>
<li>main 方法可以返回 int 类型，非 0 返回值代表一个错误</li>
<li>main 方法可以接收字符串数组为参数</li>
<li>如果需要使用关键字作为变量名需要在前面加 @ 符号</li>
<li>C# 中所有值都是某种类型的实例</li>
<li>值类型实例总是复制传递</li>
<li>引用类型实例存在堆，引用地址存在栈</li>
<li>decimal 不是原生数据类型</li>
<li>整数类型默认以 int 类型进行计算；浮点数默认类型是 double</li>
<li>数组中的元素总是存在连续的内存块中；数组是引用类型</li>
<li>表达式本质上是值，最简单的表达式是常量和变量</li>
<li>二元运算符（一般指数学运算）是左结合；赋值、lambda、null 合并运算和条件运算符都是右结合</li>
<li>使用 ref out 将值类型参数变成引用传递</li>
</ul>
<hr>
<h1 id="精度转换问题"><a href="#精度转换问题" class="headerlink" title="精度转换问题"></a>精度转换问题</h1><ul>
<li>值类型小转大属于隐式转换，不会有损失；反之则需要显式转换且有损失；当一个非常大的 long 转换为 double 还是会有精度损失；整数比浮点数小，但精度比浮点数高</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">long</span> a = <span class="number">12345678901234567L</span>;</span><br><span class="line"><span class="built_in">double</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际结果</span></span><br><span class="line">b = <span class="number">12345678901234568</span>;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="一个类包含方法成员与数据成员"><a href="#一个类包含方法成员与数据成员" class="headerlink" title="一个类包含方法成员与数据成员"></a>一个类包含方法成员与数据成员</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 数据成员</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法成员</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> UserInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Power</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="实例成员与静态成员"><a href="#实例成员与静态成员" class="headerlink" title="实例成员与静态成员"></a>实例成员与静态成员</h1><p><strong>执行顺序：</strong></p>
<ol>
<li>静态成员</li>
<li>静态构造方法</li>
<li>实例成员</li>
<li>构造方法</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 实例成员</span></span><br><span class="line"><span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员，静态成员全局共享</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="值类型占用的内存大小就是其字段类型大小的总和"><a href="#值类型占用的内存大小就是其字段类型大小的总和" class="headerlink" title="值类型占用的内存大小就是其字段类型大小的总和"></a>值类型占用的内存大小就是其字段类型大小的总和</h1><ul>
<li>共 12 byte，但 CLR 会以 8 byte 为参考乘字段的个数，最终大小为 16 byte</li>
<li>最小 1 byte，不足 1 byte 的当 1 byte 用，例如 bool = 1 bit</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4 byte</span></span><br><span class="line"><span class="built_in">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8 byte</span></span><br><span class="line"><span class="built_in">long</span> b;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="checked-整数溢出检查"><a href="#checked-整数溢出检查" class="headerlink" title="checked 整数溢出检查"></a>checked 整数溢出检查</h1><ul>
<li>值类型溢出后会跳转到最大或最小值</li>
<li>使用 checked 会检查指定代码，如果溢出则报错</li>
<li>使用 unchecked 取消检查溢出（默认）</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="built_in">int</span>.MinValue;</span><br><span class="line">++a; <span class="comment">// a 等于 int.MaxValue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查溢出</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">1000000</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">1000000</span>;</span><br><span class="line"><span class="built_in">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">checked</span><br><span class="line">&#123;</span><br><span class="line">  c = a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>浮点类型无法检查溢出，它们为正负无穷大</li>
<li>一个 NaN 永远不等于其它值或其它 NaN 值，只能使用 IsNaN 判断；使用 Equals 判断两者 NaN 却是相等的</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.0</span> / <span class="number">0.0</span> = <span class="comment">// 正无穷</span></span><br><span class="line"><span class="number">-1.0</span> / <span class="number">0.0</span> = <span class="comment">// 负无穷</span></span><br><span class="line"><span class="number">1.0</span> / <span class="number">-0.0</span> = <span class="comment">// 负无穷</span></span><br><span class="line"><span class="number">-1.0</span> / <span class="number">0.0</span> = <span class="comment">// 正无穷</span></span><br><span class="line"><span class="number">0.0</span> / <span class="number">0.0</span> = <span class="comment">// NaN</span></span><br><span class="line">(<span class="number">1.0</span> / <span class="number">0.0</span>) - (<span class="number">1.0</span> / <span class="number">0.0</span>) = <span class="comment">// NaN（无穷减无穷）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>float double 在内部都是用基于 2 来表示数值，只有基于 2 的数值才能精确表示；而 decimal 基于 10，它能精确表示基于 10、2、5 的数值，但 double decimal 都不能精确表示基于 10 的循环小数，这将影响值对比操作</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">decimal</span> m = <span class="number">1</span>m / <span class="number">6</span>m <span class="comment">// 0.1666666666666666667M</span></span><br><span class="line"><span class="built_in">double</span> d = <span class="number">1.0</span> / <span class="number">6.0</span> <span class="comment">// 0.166666666666</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h1><ul>
<li>栈是存储局部变量和方法参数的内存；栈会在方法进入或退出时增加或减少，俗称进入和弹出操作</li>
<li>栈是用来存放在方法中定义的一些基本类型变量和对象的引用变量；如果值类型是在方法内部创建（局部变量），则跟随方法入栈</li>
<li>堆是保存对象实例的内存；新创建的对象会存在堆上并返回其引用地址，只要该地址不再被任何对象引用则被 GC 回收</li>
<li>堆是用来存放由 new 创建的对象和数组，即动态申请的内存都存放在堆；如果值类型是引用类型的成员变量（例如在 new User() 里面有一个 public int a），也一起存储在堆上</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此例来源于网络</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> PointX &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> PointY &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">StartProgram</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="built_in">double</span> pointX = <span class="number">100.1</span>;</span><br><span class="line">      InitialPoint(pointX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InitialPoint</span>(<span class="params"><span class="built_in">double</span> pointX</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> point = <span class="keyword">new</span> Point();</span><br><span class="line">      point.PointX = pointX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例分析：假设主线程从 Start() 进入执行，我们分析一下方法中的变量在内存中的大致分配情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先将 Start() 方法指令压入栈底，然后压入局部变量 pointX ；紧接着将 InitialPoint() 方法压入栈底，形参 pointX</span></span><br><span class="line"><span class="comment">// 压入栈底，在堆上实例化 Point 对象（包括其成员变量 PointX 和 PointY)，并在栈上创建 point 变量指向堆上的 Point 对象</span></span><br><span class="line"><span class="comment">// 最后给成员变量 PointX 赋值</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="静态字段也会被分配到堆中，但其会一直存活到应用程序域结束"><a href="#静态字段也会被分配到堆中，但其会一直存活到应用程序域结束" class="headerlink" title="静态字段也会被分配到堆中，但其会一直存活到应用程序域结束"></a>静态字段也会被分配到堆中，但其会一直存活到应用程序域结束</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ABC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">string</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>《CShard 核心技术指南》笔记</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL 常用语句</title>
    <url>/MyBlog/2020/06/05/MySQL-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="如果两张表的字段一致，并且希望插入全部数据"><a href="#如果两张表的字段一致，并且希望插入全部数据" class="headerlink" title="如果两张表的字段一致，并且希望插入全部数据"></a>如果两张表的字段一致，并且希望插入全部数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure>
<h1 id="导入指定字段"><a href="#导入指定字段" class="headerlink" title="导入指定字段"></a>导入指定字段</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(name) <span class="keyword">select</span> name <span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure>
<h1 id="导入目标表中不存在的记录"><a href="#导入目标表中不存在的记录" class="headerlink" title="导入目标表中不存在的记录"></a>导入目标表中不存在的记录</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1</span><br><span class="line">(</span><br><span class="line">id,</span><br><span class="line">name</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">id,</span><br><span class="line">name</span><br><span class="line"><span class="keyword">from</span> table2</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1</span><br><span class="line">    <span class="keyword">where</span> table1.id<span class="operator">=</span>table2.id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><ul>
<li>limit 前是跳过多少数据，后是提取多少数据</li>
<li>注意先筛选后分页</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span> limit <span class="number">3</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h1 id="强制使用指定索引"><a href="#强制使用指定索引" class="headerlink" title="强制使用指定索引"></a>强制使用指定索引</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> force index(<span class="string">&#x27;索引名&#x27;</span>) <span class="keyword">where</span> xxx</span><br></pre></td></tr></table></figure>
<h1 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 前缀索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name(length))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一般索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> table_name(column_name(length))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name1, column_name2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>索引原理</title>
    <url>/MyBlog/2020/06/12/MySQL-%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="一句话攻略"><a href="#一句话攻略" class="headerlink" title="一句话攻略"></a>一句话攻略</h1><ul>
<li>索引是一种数据结构</li>
<li>索引是空间换时间</li>
<li>MySQL 禁止手动创建哈希索引，因为其主要存在内存，会占用空间</li>
<li>查询优化器会自动调整 SQL 语句的顺序，将有索引的前置</li>
<li>当一张表全部字段都是索引时，最左原则无效</li>
</ul>
<h1 id="聚集索引（InnoDB）"><a href="#聚集索引（InnoDB）" class="headerlink" title="聚集索引（InnoDB）"></a>聚集索引（InnoDB）</h1><p><img src="https://tagost.aiur.site/blog-imgs/sql-index/1.png" alt="聚集索引图"></p>
<ul>
<li>将数据与索引放到了一块，找到索引也就找到了数据</li>
<li>索引的叶子节点就是对应的数据节点，可以直接获取到对应的全部列的数据</li>
<li>聚集索引默认实现是主键索引</li>
<li><strong>在 InnoDB 中主键索引以外的都叫辅助索引（二级索引），例如复合索引、唯一索引、前缀索引</strong></li>
<li>如果没有主键，系统会先选择一个唯一非 NULL 索引代替；如果整张表没有索引则会生成一个隐藏的聚集索引；不管怎样都会保证有一个聚集索引</li>
</ul>
<h2 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h2><ul>
<li>当一句 SQL 需要查询主键索引以及辅助索引以外的字段时就会造成回表，因为索引里没有你要的数据，肯定要回表查询</li>
</ul>
<h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><ul>
<li>查询的的数据列只从辅助索引中就能够取得，不必从主键索引获取</li>
</ul>
<h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><h1 id="非聚集索引（Myisam）"><a href="#非聚集索引（Myisam）" class="headerlink" title="非聚集索引（Myisam）"></a>非聚集索引（Myisam）</h1><p><img src="https://tagost.aiur.site/blog-imgs/sql-index/2.png" alt="非聚集索引"></p>
<ul>
<li>将数据、索引分开存储，数据顺序与索引顺序无关</li>
<li>先在索引表中查找数据的物理地址然后再到数据表中查找对应数据</li>
</ul>
<h1 id="避免跳过索引"><a href="#避免跳过索引" class="headerlink" title="避免跳过索引"></a>避免跳过索引</h1><ul>
<li>索引遇到范围查询 &gt;、&lt;、between、like 会停止匹配</li>
<li>实际开发不要用数据库做逻辑</li>
<li>同时也要注意数据类型，不要将数字类型用字符串查询</li>
</ul>
<h2 id="不要在-SQL-语句中使用以下运算符"><a href="#不要在-SQL-语句中使用以下运算符" class="headerlink" title="不要在 SQL 语句中使用以下运算符"></a>不要在 SQL 语句中使用以下运算符</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span></span><br><span class="line"><span class="operator">-</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="operator">/</span></span><br><span class="line"><span class="operator">!=</span></span><br><span class="line"><span class="operator">&lt;&gt;</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">or</span></span><br></pre></td></tr></table></figure>
<h1 id="索引失效原理"><a href="#索引失效原理" class="headerlink" title="索引失效原理"></a>索引失效原理</h1><ul>
<li>索引是根据二分查找实现的，而二分查找是有序的，任何无序的数据都会导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例如复合索引 A、B，A 是有序的情况下 B 才有序，否则索引失效</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> A <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> B <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为什么范围查询后面的条件无法命中索引？</span></span><br><span class="line"><span class="comment">-- 因为范围查询会导致后面条件无序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> A <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> B <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- like 同理，因为双 % 会导致模糊查询，所以无法命中索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> A <span class="keyword">like</span> <span class="string">&#x27;%1%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 而 % 前面是固定值的情况下是有效的，因为符合左前缀法则</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> A <span class="keyword">like</span> <span class="string">&#x27;1%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="InnoDB-和-Myisam-区别"><a href="#InnoDB-和-Myisam-区别" class="headerlink" title="InnoDB 和 Myisam 区别"></a>InnoDB 和 Myisam 区别</h1><ul>
<li>InnoDB 支持事务、外键、聚集索引、行锁、物理两个文件（FRM 表定义、IBD 数据和索引）</li>
<li>Myisam 不支持事务、不支持外键、非聚集索引、表锁、物理三个文件（FRM 表定义、MYD 数据文件、MYI 索引文件）、支持全文索引（还是交给 ES 吧）</li>
</ul>
<h1 id="主键类型的选择"><a href="#主键类型的选择" class="headerlink" title="主键类型的选择"></a>主键类型的选择</h1><ul>
<li>分布式的情况下可以采用中心服务器生成雪花 ID</li>
<li>因为 B+TREE 的原因，最好使用连续的整数字段，更好确定查找访问范围</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>缓存穿透/布隆过滤器/分布式锁</title>
    <url>/MyBlog/2020/07/06/Redis-%E7%BC%93%E5%AD%98%E5%B8%83%E9%9A%86%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="数据库瓶颈"><a href="#数据库瓶颈" class="headerlink" title="数据库瓶颈"></a>数据库瓶颈</h1><ul>
<li>一般情况下数据库最先有瓶颈，最开始的解决方法是创建数据库连接池避免频繁创建链接（类似线程池）</li>
<li>接下来是缓存层、分区、分表、分库、数据库集群</li>
<li>目前常用的情况是用 Redis 作缓存层</li>
</ul>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><ul>
<li>请求 Redis 没有的数据导致直接查询数据库的行为叫缓存穿透</li>
<li>可以将不存在的数据用 NULL 缓存进 Redis，但这种做法会被连续穿透产生 N 个 NULL 最后把 Redis 撑爆</li>
<li>缓存雪崩与缓存击穿也属于穿透，是特殊情况下的表现</li>
<li><strong>一般项目不需要解决穿透问题，因为数据太小数据库都能硬抗</strong></li>
<li>可以使用布隆过滤器解决</li>
</ul>
<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><ul>
<li>缓存层突然失效导致所有请求访问数据库</li>
<li><strong>Redis 所有的 key 有效期不能一致，否则会统一过期；可以采用随机过期时间避免这个问题</strong></li>
<li><strong>Redis 宕机也会雪崩；可以采用分布式集群 Redis</strong></li>
<li>切片集群：将主数据分切多个部分存在多个 Redis</li>
<li>副本集群：将主数据完整复制一份到多个 Redis</li>
<li>如果所有 Redis 服务雪崩那么可以读取持久化数据或先缓存常用数据，例如用户表</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 采用 HASH 环</span></span><br><span class="line"><span class="comment">// 假设环的大小为 2 的 32 次方</span></span><br><span class="line"><span class="comment">// 用 Redis 的 IP 取模</span></span><br><span class="line"></span><br><span class="line">Hash(ip) % (Redis数量 ^ <span class="number">32</span>) = Redis 服务器所在环的位置</span><br></pre></td></tr></table></figure>
<h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><ul>
<li>只缓存了一条数据并且失效</li>
</ul>
<h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><ul>
<li>布隆过滤器会创建一个 Bit 数组，将请求的数据经过 HASH 后在指定的数组位置上标记为 True，然后再用数据库的值经过哈希后进行对比，如果为 1，则数据存在</li>
<li>布隆算法有一定错误率，如果布隆告诉你数据存在，那数据库可能不存在；如果布隆告诉你数据不存在，那就一定不存在</li>
<li>布隆过滤器是一个用错误率换取空间和时间的算法</li>
<li>如果使用一个 HASH 方法被暴力破解，那么可以使用多个 HASH 方法来解决。如果还被破解那就只能重写 HASH 方法</li>
<li>多个 HASH 方法下只要有一个结果为 FALSE，那么直接返回不存在</li>
<li>HASH 方法不是越多越好，Bit 数组也不是越长越好（如果内存够大能塞进整张表的数据则例外，但这样就违背了布隆过滤器的原则）</li>
<li>如果数据库更新，那么可以做一个定时任务更新布隆过滤器</li>
</ul>
<h1 id="简易布隆过滤器实现"><a href="#简易布隆过滤器实现" class="headerlink" title="简易布隆过滤器实现"></a>简易布隆过滤器实现</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BitArray 大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> BitArrayLength &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Hash 的数量（用多个 Hash 匹配更精确）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span> HashCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BitArray BitArray &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 配置方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fpp&quot;&gt;</span>精准率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fieldCount&quot;&gt;</span>数据库字段数量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Config</span>(<span class="params"><span class="built_in">float</span> fpp = <span class="number">0.001f</span>, <span class="built_in">int</span> fieldCount = <span class="number">10000</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置布隆数组大小</span></span><br><span class="line">    BitArrayLength = (<span class="built_in">int</span>)Math.Round(-(fieldCount * Math.Log(fpp) / Math.Pow(Math.Log(<span class="number">2</span>), <span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置合适的 bit 集合数量</span></span><br><span class="line">    HashCount = (<span class="built_in">byte</span>)Math.Round(BitArrayLength / fieldCount * Math.Log(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    BitArray = <span class="keyword">new</span> BitArray(BitArrayLength);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取 key 的哈希集合</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;<span class="built_in">int</span>&gt; <span class="title">GetHashList</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = key.GetHashCode();</span><br><span class="line">    <span class="keyword">var</span> random = <span class="keyword">new</span> Random(hash);</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; HashCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        list.Add(random.Next() % BitArrayLength);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 根据哈希集合添加 Bloom</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetBitArray</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = GetHashList(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> data <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        BitArray.Set(data, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 根据哈希集合查询 Bloom</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">GetBitArray</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = GetHashList(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> data <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (BitArray[data])</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count == HashCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Redis-中使用布隆过滤器插件"><a href="#Redis-中使用布隆过滤器插件" class="headerlink" title="Redis 中使用布隆过滤器插件"></a>Redis 中使用布隆过滤器插件</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 docker 运行 redis 布隆过滤器插件</span></span><br><span class="line">docker run -p <span class="number">6379</span>:<span class="number">6379</span> --name redis-redisbloom redislabs/rebloom:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">BF.ADD newFilter foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询元素是否存在</span></span><br><span class="line">BF.EXISTS newFilter foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加多个元素</span></span><br><span class="line">BF.MADD myFilter foo bar baz</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询多个元素</span></span><br><span class="line">BF.MEXISTS myFilter foo nonexist bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置布隆过滤器：1、redis key 2、能接受的错误率 3、数据库某个字段的数据量</span></span><br><span class="line">BF.RESERVE customFilter <span class="number">0.0001</span> <span class="number">600000</span></span><br></pre></td></tr></table></figure>
<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><ul>
<li>单一应用的锁只能解决当前项目的问题，分布式应用下要有一个中间商来解决锁的问题</li>
<li>死锁：抢到锁后无法释放锁</li>
<li>正常情况下可以为分布式锁加过期时间来解锁，但在并发情况下可能无法正确设置过期时间</li>
<li>可以使用消息队列来排队加锁避免并发产生的系列问题</li>
</ul>
<h1 id="Redis-锁与-Zookeeper-的不同"><a href="#Redis-锁与-Zookeeper-的不同" class="headerlink" title="Redis 锁与 Zookeeper 的不同"></a>Redis 锁与 Zookeeper 的不同</h1><ul>
<li>Redis 锁设置有效期可能会在设置前发生并发而跳过设置过期时间，同时锁的过期时间不知道设置多少合适</li>
<li>Zookeeper 是基于最终一致性的服务框架，它可以在多节点上写入数据；有持久节点和临时节点</li>
</ul>
<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><ul>
<li>使用 config get dir 命令行获取 Redis 根目录</li>
</ul>
<h2 id="RDB-二进制文件保存"><a href="#RDB-二进制文件保存" class="headerlink" title="RDB 二进制文件保存"></a>RDB 二进制文件保存</h2><ul>
<li>默认保存方式；适用于非强一致数据；占用大量内存</li>
<li>使用 SAVE / LOAD 会阻塞</li>
<li>在输入 BGSAVE 时创建子进程，利用系统的 fork / Copy or Write 机制复制共享内存快照到临时 RDB 文件最后写入实际 RDB（定时触发时默认使用这种方式）</li>
<li>启动 Redis 时会自动检测是否有 RDB 文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis.conf</span></span><br><span class="line"><span class="comment"># 每 X 秒内判断是否有 N 条数据发生改变时触发</span></span><br><span class="line">save 60 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它命令也会生成 RDB 文件</span></span><br><span class="line">flushall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 Redis 也会产生 RDB</span></span><br></pre></td></tr></table></figure>
<h2 id="AOF-日记保存"><a href="#AOF-日记保存" class="headerlink" title="AOF 日记保存"></a>AOF 日记保存</h2><ul>
<li>通过在日记文件中追加记录达到持久化效果</li>
<li>一般情况下使用每秒写入的配置方式</li>
<li>启动 Redis 时会自动检测是否有 AOF 文件（优先度大于 RDB）</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/MyBlog/2021/02/02/%E4%B8%AD%E9%97%B4%E4%BB%B6-Nginx/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="什么是-Nginx"><a href="#什么是-Nginx" class="headerlink" title="什么是 Nginx"></a>什么是 Nginx</h1><ul>
<li>是一个高性能的 HTTP 和反向代理 Web 服务器</li>
<li>同时也提供 IMAP / POP3 / SMTP 服务</li>
<li><strong>反向代理：公网到内网</strong></li>
<li><strong>正向代理：公网到公网，例如加速器</strong></li>
<li>理论上能支持 50000 并发</li>
</ul>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="轮循"><a href="#轮循" class="headerlink" title="轮循"></a>轮循</h2><ul>
<li>按顺序将网络请求分配到各个业务服务器</li>
</ul>
<h2 id="加权轮循"><a href="#加权轮循" class="headerlink" title="加权轮循"></a>加权轮循</h2><ul>
<li>为某个 IP 分配高优先级，让请求优先分配到指定业务服务器</li>
</ul>
<h2 id="IP-HASH"><a href="#IP-HASH" class="headerlink" title="IP HASH"></a>IP HASH</h2><ul>
<li>将客户的 IP 进行 HASH 并将其分配到指定业务服务器</li>
</ul>
<h1 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h1><ul>
<li>充当静态资源服务器，将其当作 CDN</li>
</ul>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nginx start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制停止</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==================== 全局配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程数 = CPU 核心数</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 最大连接数</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== HTTP 配置</span></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合文件名，相当于分层管理追加文件</span></span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每条连接的生命周期</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否开启动态压缩</span></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ==================== 端口监听</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 负载均衡</span></span><br><span class="line">    <span class="attribute">upstream</span> 域名 &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听 URI</span></span><br><span class="line">        <span class="attribute">server_name</span>  域名;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### ==================== 监听域名后缀</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 开启静态 gzip 文件识别</span></span><br><span class="line">            <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 开枪 vue 路由识别</span></span><br><span class="line">            <span class="attribute">try_files</span> $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /global &#123;</span><br><span class="line">            <span class="attribute">root</span> /;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title>多线程 / 异步</title>
    <url>/MyBlog/2020/06/24/CShard-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><ul>
<li>单线程应用：只在主线程运行</li>
<li>多线程应用：在主线程中调用多个线程运行</li>
<li><strong>在单核服务器上线程会以时间块分段执行，在多核服务器上线程可以并行执行</strong></li>
<li>不要人为的通过延时操控线程执行顺序</li>
<li>花费大量时间数据传输称为 I/O-Bound</li>
<li>花费大量时间用 CPU 计算叫 CPU-Bound</li>
<li><strong>不同线程影响同一变量称为线程安全</strong></li>
<li>子线程异常无法被主线程捕获</li>
<li>默认情况下创建的是前台线程，前台线程需要等待运行；后台线程不需要等待，生命周期随主线程的终止而终止</li>
<li>线程效率并不是线性增长，它还需要一些管理成本</li>
</ul>
<h1 id="线程的运行流程"><a href="#线程的运行流程" class="headerlink" title="线程的运行流程"></a>线程的运行流程</h1><p><img src="https://tagost.aiur.site/blog-imgs/thread/1.png" alt="线程的运行流程"></p>
<h1 id="关于匿名委托的闭包变量传递"><a href="#关于匿名委托的闭包变量传递" class="headerlink" title="关于匿名委托的闭包变量传递"></a>关于匿名委托的闭包变量传递</h1><ul>
<li>在匿名委托中，因为方法是闭包的，所以引入的局部变量会被编译为成员变量。如果是以参数形式传入则不会</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;asd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Action&lt;<span class="built_in">string</span>&gt; threadStart = (str) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="keyword">var</span> lee = str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!done)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(lee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    threadStart(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tagost.aiur.site/blog-imgs/thread/2.png" alt="IL"></p>
<h1 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h1><ul>
<li>一般使用 lock 关键字来实现线程安全</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lock</span>(_lock)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><ul>
<li>就像在线程执行的过程中加了一把锁，满足条件后解锁</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">event</span> = <span class="keyword">new</span> MaunalResetEvent(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 阻塞线程并开始等待信号</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;等待接收信号！此时阻塞线程&quot;</span>);</span><br><span class="line">    <span class="keyword">event</span>.WaitOne();</span><br><span class="line">    <span class="keyword">event</span>.Dispose();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收到信号后运行</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;接收到信号！&quot;</span>);</span><br><span class="line">&#125;.Start();</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开信号</span></span><br><span class="line"><span class="keyword">event</span>.Set();</span><br></pre></td></tr></table></figure>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><ul>
<li>如果是自己调用 Thread 类操作线程，那么每次创建关闭都会消耗系统资源</li>
<li>线程池可以让软件在刚开始帮你创建 N 条线程以复用</li>
<li>最简单的执行线程池的方式就是 Task.Run</li>
<li><strong>超额订阅：活跃的线程成果 CPU 的核数，系统就会分割线程的运行时间</strong></li>
<li>CLR 通过队列限流防止超额订阅</li>
</ul>
<h1 id="TASK"><a href="#TASK" class="headerlink" title="TASK"></a>TASK</h1><ul>
<li>.Net 4.0 可以用 Task.Factory 来使用 Task</li>
<li>Task 默认使用后台线程池，所以当主线程结束 Task 也会结束</li>
<li>await 关键字就是 Task.Wait</li>
<li>如果 Task 还未完成，调用 Task.Result 会阻塞并等待其完成</li>
<li>如果在 Task 方法块里抛出了一个异常，那么该异常就会抛给 await 或 Task.Result 的地方；如果不想让它抛出异常可以判断 Task 的 IsFaulted 或 IsCanceled 属性</li>
<li>Continuation 允许 Task 执行完毕后继续执行其它代码</li>
</ul>
<h2 id="针对长时间的-IO-操作不采用线程池"><a href="#针对长时间的-IO-操作不采用线程池" class="headerlink" title="针对长时间的 IO 操作不采用线程池"></a>针对长时间的 IO 操作不采用线程池</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> task = Task.Factory.StartNew(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 需要长时间运行的代码</span></span><br><span class="line"></span><br><span class="line">&#125;, TaskCreationOptions.LongRunning);</span><br></pre></td></tr></table></figure>
<h1 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async / Await"></a>Async / Await</h1><ul>
<li>await 关键字简化了 Continuation 的过程</li>
<li>await 会将结果返回给调用者</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// await 其实是实现了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = x.GetAwaiter();</span><br><span class="line">a.OnCompleted(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> result = a.GetResult();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CShard</category>
      </categories>
  </entry>
  <entry>
    <title>语言基础2</title>
    <url>/MyBlog/2020/06/05/CShard-Nutshell-2/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>《CShard 核心技术指南》笔记</category>
      </categories>
  </entry>
  <entry>
    <title>DDD 领域驱动设计</title>
    <url>/MyBlog/2020/07/09/%E5%85%B6%E5%AE%83-DDD/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="一句话攻略"><a href="#一句话攻略" class="headerlink" title="一句话攻略"></a>一句话攻略</h1><ul>
<li>DDD 解决了需求经常变，想重构又怕出错的问题</li>
<li>学习 ABP 能帮助入门 DDD，熟悉领域服务、领域事件、聚合根（充血模型）</li>
<li></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>RMMZ Effekseer 技能粒子特效软件教程</title>
    <url>/MyBlog/2020/07/10/%E5%85%B6%E5%AE%83-Effekseer/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="一般说明"><a href="#一般说明" class="headerlink" title="一般说明"></a>一般说明</h1><ul>
<li>mean：常量固定值</li>
<li>dev：倍率</li>
<li>1 秒 = 60 帧</li>
</ul>
<h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><ul>
<li>Window -&gt; Recorder</li>
<li>可以选择导出的分辨率、格式、图层、帧动画</li>
</ul>
<h1 id="Basic-Settings-基本设置"><a href="#Basic-Settings-基本设置" class="headerlink" title="Basic Settings 基本设置"></a>Basic Settings 基本设置</h1><ul>
<li>visibility：显示/隐藏</li>
<li>name：图层名</li>
<li>spawn count：生成的图层数量</li>
<li>infinite：无限数量</li>
<li>inherit position：继承坐标</li>
<li>inherit rotation：继承旋转</li>
<li>inherit scale：继承大小</li>
<li>destory after time：生命周期结束后清除对象</li>
<li>destory with parent：将父类一起清除</li>
<li>destory when no：？</li>
<li>time to live：生命周期（帧）</li>
<li>spawn rate：生命周期 / 这个值 = 实际生命周期；千万不要设为 0，会瞬间生成一车粒子电脑直接爆炸</li>
<li>initial delay：特效开始播放时间（帧）</li>
</ul>
<h1 id="Position-坐标"><a href="#Position-坐标" class="headerlink" title="Position 坐标"></a>Position 坐标</h1><ul>
<li>set position：常规坐标</li>
<li>pva：递增坐标</li>
<li>easing：时间轴坐标</li>
<li>f-curve：？</li>
</ul>
<h1 id="Rotation-旋转"><a href="#Rotation-旋转" class="headerlink" title="Rotation 旋转"></a>Rotation 旋转</h1><ul>
<li>fixed angle：常规角度</li>
<li>pva：递增角度</li>
<li>easing：时间轴角度</li>
</ul>
<h1 id="Base-Render-Settings-贴图渲染设置"><a href="#Base-Render-Settings-贴图渲染设置" class="headerlink" title="Base Render Settings 贴图渲染设置"></a>Base Render Settings 贴图渲染设置</h1><ul>
<li>texture：贴图</li>
<li>fade-in：淡入</li>
<li>fade-out：淡出</li>
<li>frame count：淡出淡入的值</li>
</ul>
<h2 id="blend-颜色叠加方式，类似-PS"><a href="#blend-颜色叠加方式，类似-PS" class="headerlink" title="blend 颜色叠加方式，类似 PS"></a>blend 颜色叠加方式，类似 PS</h2><ul>
<li>opacity：无透明度</li>
<li>blend：有透明度</li>
<li>additive：明度叠加</li>
<li>subtract：减去</li>
<li>multiply：叠加</li>
</ul>
<h2 id="UV-动画类型"><a href="#UV-动画类型" class="headerlink" title="UV 动画类型"></a>UV 动画类型</h2><ul>
<li>standard：静态</li>
<li>scroll：循环滚动</li>
</ul>
<h1 id="Render-Settings-渲染扩展设置"><a href="#Render-Settings-渲染扩展设置" class="headerlink" title="Render Settings 渲染扩展设置"></a>Render Settings 渲染扩展设置</h1><h2 id="sprite-精灵"><a href="#sprite-精灵" class="headerlink" title="sprite 精灵"></a>sprite 精灵</h2><ul>
<li>vertex color 自定义颜色</li>
<li>vertex coords 自定义贴图形状</li>
</ul>
<h3 id="color-all-颜色叠加"><a href="#color-all-颜色叠加" class="headerlink" title="color all 颜色叠加"></a>color all 颜色叠加</h3><ul>
<li>fixed：固定值</li>
<li>random：随机范围</li>
<li>easing：时间轴范围</li>
<li>f-curve：？</li>
</ul>
<h3 id="configuration-配置"><a href="#configuration-配置" class="headerlink" title="configuration 配置"></a>configuration 配置</h3><ul>
<li>Billboard：固定面向镜头</li>
<li>Rotated Billboard：支持旋转</li>
</ul>
<h2 id="ring-光环"><a href="#ring-光环" class="headerlink" title="ring 光环"></a>ring 光环</h2><ul>
<li>rendering order：</li>
</ul>
<h3 id="shape-形状"><a href="#shape-形状" class="headerlink" title="shape 形状"></a>shape 形状</h3><ul>
<li>dount：圆形</li>
<li>crescent：半圆</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>TDD 测试驱动开发</title>
    <url>/MyBlog/2020/07/31/%E5%85%B6%E5%AE%83-TDD/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="传统流程的弊端"><a href="#传统流程的弊端" class="headerlink" title="传统流程的弊端"></a>传统流程的弊端</h1><ul>
<li>大部分测试是手动的</li>
<li>业务紧急没时间做测试</li>
<li>无法重构代码，怕破坏原有模块</li>
<li>文档从不更新</li>
<li>学习和维护成本高</li>
</ul>
<h1 id="什么是-TDD"><a href="#什么是-TDD" class="headerlink" title="什么是 TDD"></a>什么是 TDD</h1><ul>
<li>它是一种敏捷开发</li>
<li>传统流程是先做好项目再统一测试，现在是开发时就编写测试</li>
<li>根据测试编写业务代码能减少维护成本</li>
<li>大多数情况下都是测试行为，也就是 public 方法</li>
</ul>
<h1 id="测试的三个阶段"><a href="#测试的三个阶段" class="headerlink" title="测试的三个阶段"></a>测试的三个阶段</h1><ul>
<li>Arrange：创建对象、 数据、输入</li>
<li>Act：执行方法并返回结果</li>
<li>Assert：检查结果</li>
</ul>
<h1 id="TDD-流程"><a href="#TDD-流程" class="headerlink" title="TDD 流程"></a>TDD 流程</h1><ul>
<li>拆分需求</li>
<li>编写测试</li>
<li><strong>验证测试</strong></li>
<li>根据测试代码编写产品代码</li>
<li><strong>验证测试</strong></li>
<li>重构</li>
<li><strong>验证测试</strong></li>
</ul>
<h1 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h1><ul>
<li>单元测试：独立模块的测试</li>
<li>集成测试：包含数据库在内一定范围的联合测试</li>
<li>皮下测试：针对接口层的测试</li>
<li>UI 测试：在 UI 层的测试</li>
</ul>
<h1 id="在-Net-中使用-xUnit-进行测试"><a href="#在-Net-中使用-xUnit-进行测试" class="headerlink" title="在 .Net 中使用 xUnit 进行测试"></a>在 .Net 中使用 xUnit 进行测试</h1><ul>
<li>新建 xUnit 测试项目</li>
<li>项目命名规范：被测试项目名 + Test</li>
<li>测试类命名规范：被测试类名 + Test</li>
<li>测试类中每个方法都会走一遍构造方法</li>
</ul>
<h2 id="如何测试？"><a href="#如何测试？" class="headerlink" title="如何测试？"></a>如何测试？</h2><ul>
<li>使用 new 创建实例调用方法</li>
<li>最后使用 Assert 类进行结果检测</li>
</ul>
<h2 id="测试分组"><a href="#测试分组" class="headerlink" title="测试分组"></a>测试分组</h2><ul>
<li>[Trait(“大类名”,”小类名”)] 此特性可以将各个测试方法分组，要在测试资源管理器中选择特征</li>
<li>一个方法或类可以拥有多个 Trait</li>
</ul>
<h2 id="忽略测试"><a href="#忽略测试" class="headerlink" title="忽略测试"></a>忽略测试</h2><ul>
<li>在 Fact 上加一个参数 Skip = “xxxx” 即可</li>
</ul>
<h2 id="自定义输出测试信息"><a href="#自定义输出测试信息" class="headerlink" title="自定义输出测试信息"></a>自定义输出测试信息</h2><ul>
<li>注入 ITestOutputHelper 接口</li>
<li>使用该接口的实例方法 WriteLine 输出信息</li>
</ul>
<h2 id="共享上下文"><a href="#共享上下文" class="headerlink" title="共享上下文"></a>共享上下文</h2><ul>
<li>使用时类不要有副作用，否则会产生麻烦</li>
</ul>
<h3 id="单个类中使用一个实例"><a href="#单个类中使用一个实例" class="headerlink" title="单个类中使用一个实例"></a>单个类中使用一个实例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserFixtrue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UserService userService &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserFixTrue</span>(<span class="params">UserService userService</span>)</span>&#123;</span><br><span class="line">        userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后回到测试类中创建这个实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserTest</span>: <span class="title">IClassFixtrue</span>&lt;<span class="title">UserFixtrue</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> UserFixtrue userFixtrue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserTest</span>(<span class="params">UserFixtrue userFixtrue</span>)</span>&#123;</span><br><span class="line">        userFixtrue = userFixtrue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多个类中使用一个实例"><a href="#多个类中使用一个实例" class="headerlink" title="多个类中使用一个实例"></a>多个类中使用一个实例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以上一个例子的类为基础创建一个 Collection 类</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">CollectionDefinition(<span class="meta-string">&quot;ddd&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserCollectionFixtrue</span>: <span class="title">ICollectionFixtrue</span>&lt;<span class="title">UserFixtrue</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后就能在各个类中使用同一个实例</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Collection(<span class="meta-string">&quot;ddd&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserTest</span>: <span class="title">IClassFixtrue</span>&lt;<span class="title">UserFixtrue</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> UserFixtrue userFixtrue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserTest</span>(<span class="params">UserFixtrue userFixtrue</span>)</span>&#123;</span><br><span class="line">        userFixtrue = userFixtrue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据驱动测试"><a href="#数据驱动测试" class="headerlink" title="数据驱动测试"></a>数据驱动测试</h2><ul>
<li>将 [Fact] 改成 [Theory] 特性</li>
</ul>
<h3 id="InlineData"><a href="#InlineData" class="headerlink" title="InlineData"></a>InlineData</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义被测试类 User</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">InlineData(1, 2, 3)</span>]</span><br><span class="line">[<span class="meta">InlineData(1, 2, 5)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTest</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2, <span class="built_in">int</span> result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">var</span> outResult = user.Add(num1, num2);</span><br><span class="line">    Assert.Equal(result, outResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MemberData"><a href="#MemberData" class="headerlink" title="MemberData"></a>MemberData</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义被测试类 User</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserTestData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">object</span>[]&gt; Data = <span class="keyword">new</span> List&lt;<span class="built_in">object</span>[]&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;<span class="built_in">object</span>[]&gt; Data()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">MemberData(nameof(UserTestData.Data), MemberType = typeof(UserTestData))</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTest</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2, <span class="built_in">int</span> result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">var</span> outResult = user.Add(num1, num2);</span><br><span class="line">    Assert.Equal(result, outResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="外部数据来源"><a href="#外部数据来源" class="headerlink" title="外部数据来源"></a>外部数据来源</h3><ul>
<li>就是以 MemberData 为基础，将实现改为读取文件流并返回</li>
</ul>
<h3 id="自定义-Data-Attribute"><a href="#自定义-Data-Attribute" class="headerlink" title="自定义 Data Attribute"></a>自定义 Data Attribute</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDataAttribute</span>: <span class="title">DataAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// override GetData 方法</span></span><br><span class="line">    <span class="comment">// 使用 yield return 返回数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后在测试方法中调用该 Attribute 即可</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">MyData</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTest</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2, <span class="built_in">int</span> result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">var</span> outResult = user.Add(num1, num2);</span><br><span class="line">    Assert.Equal(result, outResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/MyBlog/2020/08/24/%E5%85%B6%E5%AE%83-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="单一原则-SRP"><a href="#单一原则-SRP" class="headerlink" title="单一原则 SRP"></a>单一原则 SRP</h2><ul>
<li>降低类的复杂度，一个类只负责一项职责，一个方法只做一件事</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类单一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">GetUser</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUser</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">File</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileDTO <span class="title">GetFile</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFile</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法单一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Run</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CarRun</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Run(<span class="string">$&quot;【汽车】<span class="subst">&#123;str&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HumanRun</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Run(<span class="string">$&quot;【人类】<span class="subst">&#123;str&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 OCP"></a>开闭原则 OCP</h2><ul>
<li>对扩展开放，对修改关闭</li>
<li>模块相互独立，新功能使用新代码实现，不要修改旧代码</li>
</ul>
<h2 id="里式替换原则-LSP"><a href="#里式替换原则-LSP" class="headerlink" title="里式替换原则 LSP"></a>里式替换原则 LSP</h2><ul>
<li>子类不要重写父类的方法</li>
<li>子类用新方法完成新功能</li>
</ul>
<h2 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则 DIP"></a>依赖倒置原则 DIP</h2><ul>
<li>高层依赖低层的抽象而不是实例</li>
<li>常用的情况是面向接口编程</li>
<li>IOC 框架就是以此诞生的</li>
</ul>
<h2 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 ISP"></a>接口隔离原则 ISP</h2><ul>
<li>为各个类创建专用的接口</li>
</ul>
<h2 id="合成复用-CRP"><a href="#合成复用-CRP" class="headerlink" title="合成复用 CRP"></a>合成复用 CRP</h2><ul>
<li><h2 id="迪米特-LoD"><a href="#迪米特-LoD" class="headerlink" title="迪米特 LoD"></a>迪米特 LoD</h2></li>
<li><p>类似三层架构，UI 只跟 BLL 联系，BLL 只跟 DAL 联系，禁止 UI 直接跟 DAL 联系</p>
</li>
</ul>
<h1 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h1><ul>
<li>本质就是封装 N 层</li>
</ul>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul>
<li>分为类适配器和对象适配器</li>
<li>类适配器：继承父类和接口</li>
<li>对象适配器：实现接口，涉及对象由依赖注入生成</li>
<li>主要以适配某个组件为主，例如封装 Redis 的通用方法</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> : <span class="title">Dad</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> : <span class="title">IA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dad _dad = <span class="keyword">new</span> Dad();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _dad.Get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>看上去跟适配器模式很像</li>
<li>主要以通用功能为主</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> : <span class="title">IA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 普通代理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dad _dad = <span class="keyword">new</span> Dad();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例代理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Dad2 _dad2 = <span class="keyword">new</span> Dad2();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入代理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dad3 _dad3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params">IDad3 dad3</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Dad3 = dad3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _dad.Get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write log</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li>只存在一个对象实例</li>
<li>使用 IOC 时可以让其实现单例注入</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RedisHelper GetRedisHelper &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> RedisHelper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h2 id="建造模式"><a href="#建造模式" class="headerlink" title="建造模式"></a>建造模式</h2><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h1><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h2 id="访问模式"><a href="#访问模式" class="headerlink" title="访问模式"></a>访问模式</h2><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h2><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><h2 id="解析器模式"><a href="#解析器模式" class="headerlink" title="解析器模式"></a>解析器模式</h2><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2>]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 语法</title>
    <url>/MyBlog/2020/08/05/%E5%89%8D%E7%AB%AF-TypeScript%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>
<h2 id="编译成-js"><a href="#编译成-js" class="headerlink" title="编译成 js"></a>编译成 js</h2><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">tsc 文件名.ts</span><br></pre></td></tr></table></figure>
<h2 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h2><ul>
<li>将 tsconfig.json 中的 outDir 注释取消</li>
<li>在 vscode 终端点击运行任务 -&gt; typescript -&gt; watch</li>
</ul>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num3: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>] = [<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> ErrorFlag &#123;</span><br><span class="line">  OK = <span class="number">1</span>,</span><br><span class="line">  UserNameError = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: <span class="built_in">any</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: <span class="built_in">number</span> | <span class="literal">undefined</span> = <span class="number">1</span>; <span class="comment">// 未赋值则为 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void 类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IUser &#123;</span><br><span class="line">  GetUserInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">name?: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">userDTO: UserDTO</span>): <span class="title">void</span> </span>&#123;&#125;</span><br><span class="line">Get(&#123; <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端框架从后端读取路由的弊端</title>
    <url>/MyBlog/2020/07/22/%E5%89%8D%E7%AB%AF-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%94%BE%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想起以前那帮老油条为了做菜单权限在数据库放 vue 路由就恶心，本来靠路由守卫就能解决的问题非要丢给后端。后端还要为获取路由单独写个 API，前端改了又让后端改，最后上线路由判断有问题，是前端忘记通知后端改路由的锅结果被屌的却是后端</p>
<p>背锅还不算，前端没缓存好路由导致无限从后端请求路由造成并发最后前后端一起炸</p>
<p>还美其名曰这是高可用，说是由后端动态绑定路由可以减少代码量且能避免用户进入指定界面。放屁高可用，正常人谁会浪费时间改代码看你的破界面，用户要是能跨后端验证那后端是干什么吃的</p>
<p>那帮人还好意思举例要是有一百万路由那手写多麻烦。兄弟，你是轻松了，后端倒霉了，况且能出现一百万路由说明项目本身就有问题。前端一体速度最快，非要经过网络传输获取路由，到时候出事就像上面说的前后端一起炸，这算个屁的前后端分离</p>
<p>真正的分离是前后端互不干涉，路由放后端完全是被 MVC 思维带偏了，最终双方能交互的仅限于 API 逻辑接口；前端只需要用路由守卫判断 JWT 中的 role 就能实现菜单权限，至于怕用户改 JWT 进入指定页面更不用担心，所有逻辑都要经过后端二次验证，用户也只能在这个页面干瞪眼。你说我就不想让客户看到页面？那属于个人洁癖，对团队无利。你之所以认为这么做是正确的，可能是你们公司的制度不够严格，怎么舒服怎么来。我们自从出现文中那种事后完全杜绝任何会产生前后端耦合的行为，至今项目比以前更稳</p>
<p>本来自己拿着杯子倒水喝水是最快的，现在要把杯子放在别人那里让别人给你倒水，别人一旦不在你就没水喝，而且把水拿过来也要算路程和时间</p>
<h1 id="从后端读取路由衍生的问题"><a href="#从后端读取路由衍生的问题" class="headerlink" title="从后端读取路由衍生的问题"></a>从后端读取路由衍生的问题</h1><ul>
<li>动态请求会产生多余的网络请求</li>
<li>如果后端炸了获取不到路由怎么办</li>
<li>如何解决前端框架的一系列问题，例如：获取路由后肯定要缓存路由到本地，获取最新路由还要涉及网络请求；如果不缓存，那么刷新时就会路由丢失，这时重新加载路由又要涉及网络请求</li>
<li>本来是前端全权负责，现在后端耦合所以不属于真正的前后端分离。测试时一起加班，上线后一起加班，出事后互相甩锅，维护成本增加</li>
<li>如果不及时防范和改正项目就会越来越难维护，最后只能辞职弃坑，留下屎山给新人</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>TCP-IP</title>
    <url>/MyBlog/2020/06/10/%E7%BD%91%E7%BB%9C-TCPIP/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="OSI-七层协议"><a href="#OSI-七层协议" class="headerlink" title="OSI 七层协议"></a>OSI 七层协议</h1><p><img src="https://tagost.aiur.site/blog-imgs/tcp/1.png" alt="七层协议"></p>
<h1 id="TCP-IP-四层协议"><a href="#TCP-IP-四层协议" class="headerlink" title="TCP/IP 四层协议"></a>TCP/IP 四层协议</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 OSI 七层整合为四层</span></span><br><span class="line"><span class="comment">// 常见的协议</span></span><br><span class="line"></span><br><span class="line">应用层（应用、表示、会话）：HTTP FTP SMTP DNS</span><br><span class="line">传输层：TCP UDP</span><br><span class="line">网络层：IP</span><br><span class="line">链路层</span><br></pre></td></tr></table></figure>
<h1 id="什么是-TCP"><a href="#什么是-TCP" class="headerlink" title="什么是 TCP"></a>什么是 TCP</h1><p><img src="https://img-blog.csdn.net/20180620002403691?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NjI5Njk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="TCP头"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 端口号</span></span><br><span class="line">端口号是无符号 <span class="number">2</span> byte，最大 <span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序号</span></span><br><span class="line">随机值，用于证明请求唯一性</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确认序号</span></span><br><span class="line">通常为序号 + <span class="number">1</span>，只有头类型为 ACK 的时候才有效</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首部长度</span></span><br><span class="line">数据偏移量长度</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留字段</span></span><br><span class="line">暂未使用</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头类型 - URG / ACK / PSH / RST / SYN / FIN</span></span><br><span class="line">URG：用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据</span><br><span class="line">ACK：一般用于握手挥手中的 ACK 标识</span><br><span class="line">PSH：优先级最高，接收到数据后立刻处理不缓存</span><br><span class="line">RST：复位标识，一般用于拒绝错误连接</span><br><span class="line">SYN：三次握手搭配 ACK 专用</span><br><span class="line">FIN：四次挥手搭配 ACK 专用</span><br></pre></td></tr></table></figure>
<ul>
<li>TCP 使用字节流通信，头部默认 20 byte</li>
<li>每条请求都会完成三次握手、数据传输、四次挥手</li>
<li>网络上层调用 Send（1024 KB），下层会把其封装多个 TCP 包发送，每个 TCP 大小为 1448 Byte</li>
<li>以太网最大数据是 1518 Byte</li>
<li>粘包不是 TCP 协议的问题，而是接收端的问题</li>
<li>UDP 是单向的不会出现粘包</li>
</ul>
<h2 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h2><ul>
<li>以太网头尾共占 18 Byte，剩下的空间最多 1500 Byte，也是路由器等硬件配置中默认大小</li>
</ul>
<h2 id="MSS"><a href="#MSS" class="headerlink" title="MSS"></a>MSS</h2><ul>
<li>最大值为 1460 Byte，由 MTU（1500） - IP 头（20） - TCP 头（20） 得出</li>
<li>实际情况下，TCP 还会包含 12 Byte 的时间戳，所以 1460 - 12 = 1448，最终每条 TCP 的大小为 1448</li>
</ul>
<h2 id="粘包"><a href="#粘包" class="headerlink" title="粘包"></a>粘包</h2><ul>
<li>TCP 发送 2 个数据，A 为 18 Byte，B 为 14 Byte，服务端一下把两个数据都接收了，两个不同的数据合体称之为粘包</li>
<li>要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包</li>
<li>待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包</li>
<li>要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包</li>
<li>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包</li>
</ul>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li>发送端给每个数据包添加 header，header 中包含数据包的长度 length，这样接收端在接收到数据后，通过读取 header 的 length，便知道每一个数据包的实际长度了</li>
<li>发送端将每个数据包封装为固定长度（不够的可以通过补 0 填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来</li>
<li>可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开</li>
</ul>
<h1 id="什么是-UDP"><a href="#什么是-UDP" class="headerlink" title="什么是 UDP"></a>什么是 UDP</h1><ul>
<li>UDP 头占 8 byte</li>
<li>不可靠的连接，单方面只管发送，不管对方是否收到数据</li>
<li>顺序不保证，可能会丢包</li>
</ul>
<h1 id="一般接口请求过程"><a href="#一般接口请求过程" class="headerlink" title="一般接口请求过程"></a>一般接口请求过程</h1><h2 id="1、三次握手"><a href="#1、三次握手" class="headerlink" title="1、三次握手"></a>1、三次握手</h2><p><img src="https://pics6.baidu.com/feed/9d82d158ccbf6c819624f31141341c3332fa40cd.jpeg?token=9dca9d2f40a953f4b671e80c2cad7dc4" alt="三次握手"></p>
<ul>
<li>第一次：客户端发送一条 SYN 数据请求服务端</li>
<li>第二次：服务端回报 SYN + ACK 数据给客户端</li>
<li>第三次：客户端收到后返回 ACK 到服务端</li>
<li><strong>【泛洪攻击】客户端故意不返回第三次 ACK 让服务端一直占用资源</strong></li>
<li><strong>【流量攻击】通过肉鸡发送大量请求导致带宽占满</strong></li>
</ul>
<h2 id="2、数据通信"><a href="#2、数据通信" class="headerlink" title="2、数据通信"></a>2、数据通信</h2><ul>
<li>客户端发送 Get / Post 等 HTTP 协议</li>
<li>数据会根据 MTU 分批接收</li>
<li>如今的浏览器会自动开启 HTTP-Alive 保持链接，但取决于服务器是否开启，因为会长时间占用服务器资源</li>
</ul>
<h2 id="3、四次挥手"><a href="#3、四次挥手" class="headerlink" title="3、四次挥手"></a>3、四次挥手</h2><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1030523774,3172495976&fm=26&gp=0.jpg" alt="四次挥手"></p>
<ul>
<li>第一次：客户端发送 FIN 到服务端</li>
<li>第二次：服务端回报 FIN + ACK 给客户端</li>
<li>第三次：服务端发送 FIN 到客户端</li>
<li>第四次：客户端回报 ACK 给服务端</li>
<li><strong>为了接收最后的 ACK 包服务器必须花费一定时间等待，也就是 TIME_WAIT</strong></li>
<li><strong>【HTTP Keep-Alive】为了避免频繁出现 TIME_WAIT 在短时间内保持长连接</strong></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
  </entry>
  <entry>
    <title>InnoDB ACID 事务特性</title>
    <url>/MyBlog/2020/12/31/MySQL-ACID/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="ACID-四大特性"><a href="#ACID-四大特性" class="headerlink" title="ACID 四大特性"></a>ACID 四大特性</h1><ul>
<li>原子性（Atomicity）</li>
<li>一致性（Consistency）</li>
<li>隔离性（Isolation）</li>
<li>持久性（Durabilyty）</li>
</ul>
<h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><ul>
<li>要么成功要么失败</li>
<li>提交事务时会在 Undo log 生成一条日志记录操作前的数据，如果发生错误就会根据这条日志执行相反的操作，例如 insert 错误就执行 delete</li>
</ul>
<h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><ul>
<li><strong>只有先保证其它三个特性才能保证一致性</strong></li>
</ul>
<h2 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h2><ul>
<li>事务一旦提交，对数据的改变是永久性的</li>
<li>提交事务时会在 Redo log 生成一条记录，之后写入数据库缓存，最后同步到硬盘</li>
<li>Redo log 是文件追加的形式，所以是有序的，有序比无序快</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 控制 Redo log 机制</span></span><br><span class="line">innodb_flash_log_at_trx_commit</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="operator">-</span> 让主线程同步 Redo log 到硬盘</span><br><span class="line"><span class="number">1</span> <span class="operator">-</span> <span class="keyword">commit</span> 时同步写入</span><br><span class="line"><span class="number">2</span> <span class="operator">-</span> <span class="keyword">commit</span> 时异步写入</span><br><span class="line"></span><br><span class="line">一般采用 <span class="number">1</span> 号</span><br></pre></td></tr></table></figure>
<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><ul>
<li>写操作：锁</li>
<li>读写操作：MVCC</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>七大查找算法</title>
    <url>/MyBlog/2020/09/10/%E5%85%B6%E5%AE%83-%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>十大排序算法</title>
    <url>/MyBlog/2020/09/10/%E5%85%B6%E5%AE%83-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1>]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>ES 6-11 语法</title>
    <url>/MyBlog/2020/07/09/%E5%89%8D%E7%AB%AF-ECMA%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>点击查看更多</p>
</blockquote>
<a id="more"></a>

<h1 id="变量解构赋值"><a href="#变量解构赋值" class="headerlink" title="变量解构赋值"></a>变量解构赋值</h1><ul>
<li>相当于为数组定义 key</li>
<li>方法名可以从 play: function(){} 简化为 play(){}</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [power, my, qq, yy] = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">  age: <span class="number">17</span>,</span><br><span class="line">  <span class="function"><span class="title">play</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, play &#125; = obj;</span><br></pre></td></tr></table></figure>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><ul>
<li>类似 C# 里的 $“你的名字是：{Name}”</li>
<li>注意这里使用的是反引号，键盘上的波浪线</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`数字是：<span class="subst">$&#123;arr[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>
<h1 id="简化对象"><a href="#简化对象" class="headerlink" title="简化对象"></a>简化对象</h1><ul>
<li>将 str : str 精简为 str</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> my = &#123;</span><br><span class="line">  str, <span class="comment">// str : str</span></span><br><span class="line">  obj,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="箭头函数，类似-C-匿名委托"><a href="#箭头函数，类似-C-匿名委托" class="headerlink" title="箭头函数，类似 C# 匿名委托"></a>箭头函数，类似 C# 匿名委托</h1><ul>
<li>没有构造方法</li>
<li>没有 arguments 变量</li>
<li><strong>箭头函数不适合在对象的方法和涉及 this 回调的情况下使用</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="this-在箭头函数下的作用域指向问题"><a href="#this-在箭头函数下的作用域指向问题" class="headerlink" title="this 在箭头函数下的作用域指向问题"></a>this 在箭头函数下的作用域指向问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;window 下的 name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通方法能正常获取 obj.name = lee</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通方法下的箭头函数会返回 obj.name = lee</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getName2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      name: <span class="string">&#x27;普通方法下的箭头函数&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      fn: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    obj.fn();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 箭头函数下的箭头函数会返回 window.name</span></span><br><span class="line"></span><br><span class="line">  getName3: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      name: <span class="string">&#x27;箭头函数下的箭头函数&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      fn: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    obj.fn();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.getName();</span><br><span class="line">obj.getName2();</span><br><span class="line">obj.getName3();</span><br></pre></td></tr></table></figure>
<h1 id="方法参数默认值，类似-C-的默认参数"><a href="#方法参数默认值，类似-C-的默认参数" class="headerlink" title="方法参数默认值，类似 C# 的默认参数"></a>方法参数默认值，类似 C# 的默认参数</h1><ul>
<li>有默认值的参数要放到最后</li>
<li>允许用键值为指定的参数赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">User</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(User.Name);</span><br><span class="line">  <span class="built_in">console</span>.log(User.Age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Get(&#123;</span><br><span class="line">  Name: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">  Age: <span class="number">26</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">&#123; Name, Age = <span class="number">18</span> &#125;</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Get(&#123;</span><br><span class="line">  Name: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">  Age: <span class="number">26</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h1><ul>
<li>这是一个取代 arguments 的关键字</li>
<li>rest 参数必须放到最后</li>
</ul>
<h2 id="es5-中返回一个对象"><a href="#es5-中返回一个对象" class="headerlink" title="es5 中返回一个对象"></a>es5 中返回一个对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User(<span class="string">&#x27;Lee&#x27;</span>, <span class="string">&#x27;Wu&#x27;</span>); <span class="comment">// 返回一个复杂的对象</span></span><br></pre></td></tr></table></figure>
<h2 id="es6-中返回一个数组"><a href="#es6-中返回一个数组" class="headerlink" title="es6 中返回一个数组"></a>es6 中返回一个数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User(<span class="string">&#x27;Lee&#x27;</span>, <span class="string">&#x27;Wu&#x27;</span>); <span class="comment">// [&#x27;lee&#x27;,&#x27;wu&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="es9-增强-rest-参数"><a href="#es9-增强-rest-参数" class="headerlink" title="es9 增强 rest 参数"></a>es9 增强 rest 参数</h2><ul>
<li>变量名匹配的直接赋值，不匹配的直接以对象的形式添加到 userDTO</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params">&#123; name, age, ...userDTO &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(userDTO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name: lee</span></span><br><span class="line"><span class="comment">// age: 11</span></span><br><span class="line"><span class="comment">// &#123; gender: 1, power: 999 &#125;</span></span><br><span class="line"></span><br><span class="line">Fn(&#123; <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>, <span class="attr">age</span>: <span class="number">11</span>, <span class="attr">gender</span>: <span class="number">1</span>, <span class="attr">power</span>: <span class="number">999</span> &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="将数组拆分成单个方法参数逐个传递"><a href="#将数组拆分成单个方法参数逐个传递" class="headerlink" title="将数组拆分成单个方法参数逐个传递"></a>将数组拆分成单个方法参数逐个传递</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;LEE&#x27;</span>, <span class="string">&#x27;WU&#x27;</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// LEE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Get(...arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要接收多个参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b); <span class="comment">// LEEWU</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Get(...arr);</span><br></pre></td></tr></table></figure>
<h2 id="数组合并和克隆"><a href="#数组合并和克隆" class="headerlink" title="数组合并和克隆"></a>数组合并和克隆</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="comment">// 如果只写一个数组那就是克隆</span></span><br><span class="line"><span class="comment">// 复合数组依然遵循值类型深拷贝，引用类型浅拷贝</span></span><br><span class="line"><span class="comment">// 也可以将一些 object 类型的伪数组转换成真数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...arr1, ...arr2]); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>
<h2 id="es9-对象合并"><a href="#es9-对象合并" class="headerlink" title="es9 对象合并"></a>es9 对象合并</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...obj1, ...obj2 &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><ul>
<li>第七种数据类型（undefined string symbol object null number bool）</li>
<li>值唯一</li>
<li>无法与包含自身在内的其它类型运算</li>
<li>无法使用 for 遍历，但可以用 Reflect.ownKeys 获取所有 key</li>
<li><strong>一般是某些关键字的内置属性，例如数组 Symbol.iterator</strong></li>
<li>类似 C# 里的扩展方法</li>
</ul>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="for…of-与-for…in-的区别"><a href="#for…of-与-for…in-的区别" class="headerlink" title="for…of 与 for…in 的区别"></a>for…of 与 for…in 的区别</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of 展示的是 value</span></span><br><span class="line"><span class="comment">// 注意：此方式无法作用于对象</span></span><br><span class="line"><span class="comment">// 原理是必须实现了 symbol.iterator 才能使用</span></span><br><span class="line"><span class="comment">// 请求一次返回一次结果，直到遍历完毕或条件结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in 展示的是 key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="让对象可以使用-for…of"><a href="#让对象可以使用-for…of" class="headerlink" title="让对象可以使用 for…of"></a>让对象可以使用 for…of</h2><ul>
<li>为不可遍历的对象添加一个 symbol.iterator 方法，此方法有固定格式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  list: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动添加迭代器</span></span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="comment">// 索引 Id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="built_in">this</span>.list.length - <span class="number">1</span>) &#123;</span><br><span class="line">          ++index;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="built_in">this</span>.list[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成器，类似-C-Enumerable"><a href="#生成器，类似-C-Enumerable" class="headerlink" title="生成器，类似 C# Enumerable"></a>生成器，类似 C# Enumerable</h2><ul>
<li>注意方法定义时要加 * 号</li>
<li>调用只能通过 xx.next() 方法迭代</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无限数字生成器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> ++i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据需要返回指定次数的数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = User();</span><br><span class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h2 id="next-会同时调用其它代码"><a href="#next-会同时调用其它代码" class="headerlink" title="next() 会同时调用其它代码"></a>next() 会同时调用其它代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;第一次 next() 时会返回此结果和执行以上的代码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;第二次以此类推&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以往 next() 加参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="keyword">let</span> v1 = <span class="keyword">yield</span> <span class="string">&#x27;这是第一个&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(v1);</span><br><span class="line">  <span class="keyword">let</span> v2 = <span class="keyword">yield</span> <span class="string">&#x27;第二个&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = User(<span class="string">&#x27;LEE&#x27;</span>);</span><br><span class="line">fn.next(); <span class="comment">// 打印 LEE</span></span><br><span class="line">fn.next(<span class="string">&#x27;111&#x27;</span>); <span class="comment">// 第二次运行时会将参数赋值给 v1 然后打印 111</span></span><br></pre></td></tr></table></figure>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><ul>
<li>Promise 有两个固定参数 resolve 成功 / reject 出错</li>
<li>then 提供接收成功和失败信息的方法</li>
<li>then 不能 return 返回结果到上层，只能在 then 内处理结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fnAsync = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">ok, error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 成功</span></span><br><span class="line">  ok(result);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 失败</span></span><br><span class="line">  error(result);</span><br><span class="line">&#125;).then(</span><br><span class="line">  (okMsg) =&gt; &#123;&#125;,</span><br><span class="line">  (errMsg) =&gt; &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="链式回调"><a href="#链式回调" class="headerlink" title="链式回调"></a>链式回调</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> ran = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ran &gt; <span class="number">50</span>) &#123;</span><br><span class="line">    resolve(ran);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reject(ran);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">okMsg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> okMsg;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">okMsg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(okMsg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">okMsg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(okMsg);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">errMsg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(errMsg);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Promise-allSettled，类似-C-Task-WaitAll"><a href="#Promise-allSettled，类似-C-Task-WaitAll" class="headerlink" title="Promise.allSettled，类似 C# Task.WaitAll"></a>Promise.allSettled，类似 C# Task.WaitAll</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功时会返回 fulfilled 状态，如果某一个出错则那一个返回 reject</span></span><br><span class="line"><span class="comment">// allSettled 本身返回一个必定成功的 Promise，成功时返回 Promise 对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([Fn1(), Fn2()]);</span><br></pre></td></tr></table></figure>
<h2 id="Promise-all，类似-C-Task-Any"><a href="#Promise-all，类似-C-Task-Any" class="headerlink" title="Promise.all，类似 C# Task.Any"></a>Promise.all，类似 C# Task.Any</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功时会返回 fulfilled 状态，如果某一个出错则返回错误状态</span></span><br><span class="line"><span class="comment">// 只要有一个失败，则全部失败</span></span><br><span class="line"><span class="comment">// 不管成功或失败都会返回结果值而不是 Promise 对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([Fn1(), Fn2()]);</span><br></pre></td></tr></table></figure>
<h1 id="Set-集合，相当于-Hash"><a href="#Set-集合，相当于-Hash" class="headerlink" title="Set 集合，相当于 Hash"></a>Set 集合，相当于 Hash</h1><ul>
<li>自带去重</li>
<li>实现了 iterator</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">s.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr1)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr1)].filter(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(value)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>([...arr1, ...arr2]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr1)].filter(<span class="function">(<span class="params">value</span>) =&gt;</span> !<span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(value)));</span><br></pre></td></tr></table></figure>
<h1 id="Map-键值对，相当于-C-里的-dictionary"><a href="#Map-键值对，相当于-C-里的-dictionary" class="headerlink" title="Map 键值对，相当于 C# 里的 dictionary"></a>Map 键值对，相当于 C# 里的 dictionary</h1><ul>
<li>实现了 iterator</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">m.set(<span class="string">&#x27;key2&#x27;</span>, <span class="number">123</span>);</span><br><span class="line">m.set(<span class="string">&#x27;key3&#x27;</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;dddd&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">m.set(</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="number">123</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;poo&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">m.get();</span><br><span class="line"></span><br><span class="line">m.delete();</span><br><span class="line"></span><br><span class="line">m.clear();</span><br><span class="line"></span><br><span class="line">m.size; <span class="comment">// 获取集合数量</span></span><br></pre></td></tr></table></figure>
<h1 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h1><ul>
<li>方法重写：子类的方法与父类的方法同名时会覆盖父类方法达成方法重写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义字段</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"></span><br><span class="line">User.prototype.getUserName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ES 5：&#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;LEE&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">user.getUserName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES 6</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ES 6：&#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;LEE&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">user.getUser();</span><br></pre></td></tr></table></figure>
<h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><ul>
<li>与 C# 的概念相同，实例成员用实例调用，静态成员用类调用。因为它们分别存在不同的内存区域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&#x27;LEE&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.getUser();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;LEE2&#x27;</span>, <span class="number">11</span>);</span><br><span class="line">user.getUser();</span><br></pre></td></tr></table></figure>
<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="comment">// super 就是 C# 里的 base，调用父类的构造方法</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age, gender</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, age);</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">showGender</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.gender === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userInfo = <span class="keyword">new</span> UserInfo(<span class="string">&#x27;LEE&#x27;</span>, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line">userInfo.getUser();</span><br><span class="line">userInfo.showGender();</span><br></pre></td></tr></table></figure>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">userName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">userName</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;Set：&#x27;</span> + value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User();</span><br><span class="line">user.userName = <span class="string">&#x27;asd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.userName);</span><br></pre></td></tr></table></figure>
<h1 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h1><h2 id="EPSILON-最小精度"><a href="#EPSILON-最小精度" class="headerlink" title="EPSILON 最小精度"></a>EPSILON 最小精度</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浮点数计算是有误差的，可以用两数差值与 EPSILON 对比，如果误差小于最小精度那就能选择性忽略</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(num1 - num2) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Check(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>));</span><br></pre></td></tr></table></figure>
<h2 id="二、八、十六进制，默认是十进制"><a href="#二、八、十六进制，默认是十进制" class="headerlink" title="二、八、十六进制，默认是十进制"></a>二、八、十六进制，默认是十进制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bit2 = <span class="number">0b00000010</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> bit8 = <span class="number">0o00000010</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">let</span> bit16 = <span class="number">0x00000010</span>; <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>
<h2 id="判断是否有限数"><a href="#判断是否有限数" class="headerlink" title="判断是否有限数"></a>判断是否有限数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite(num);</span><br></pre></td></tr></table></figure>
<h2 id="判断是否数字"><a href="#判断是否数字" class="headerlink" title="判断是否数字"></a>判断是否数字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(num);</span><br></pre></td></tr></table></figure>
<h2 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.parseInt(<span class="string">&#x27;2222&#x27;</span>);</span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">&#x27;111&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="判断是否整数"><a href="#判断是否整数" class="headerlink" title="判断是否整数"></a>判断是否整数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(num);</span><br></pre></td></tr></table></figure>
<h2 id="小数化整"><a href="#小数化整" class="headerlink" title="小数化整"></a>小数化整</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(num);</span><br></pre></td></tr></table></figure>
<h2 id="检测正负-0"><a href="#检测正负-0" class="headerlink" title="检测正负 0"></a>检测正负 0</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign(num);</span><br></pre></td></tr></table></figure>
<h2 id="BigInt，超越-64-位数字运算确且不自动转换为科学计数法"><a href="#BigInt，超越-64-位数字运算确且不自动转换为科学计数法" class="headerlink" title="BigInt，超越 64 位数字运算确且不自动转换为科学计数法"></a>BigInt，超越 64 位数字运算确且不自动转换为科学计数法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1n</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">98n</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + b);</span><br></pre></td></tr></table></figure>
<h1 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h1><h2 id="Object-is-判断两个值是否相等"><a href="#Object-is-判断两个值是否相等" class="headerlink" title="Object.is 判断两个值是否相等"></a>Object.is 判断两个值是否相等</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与 === 很像，但不一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(num, num);</span><br></pre></td></tr></table></figure>
<h2 id="Object-assign-对象的合并"><a href="#Object-assign-对象的合并" class="headerlink" title="Object.assign 对象的合并"></a>Object.assign 对象的合并</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果前者有字段后者没有，则覆盖有的字段，在尾部添加没有的字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">  name: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(obj1, obj2);</span><br></pre></td></tr></table></figure>
<h2 id="获取对象所有的-key-value，将对象转换为数组并转换为-Map"><a href="#获取对象所有的-key-value，将对象转换为数组并转换为-Map" class="headerlink" title="获取对象所有的 key / value，将对象转换为数组并转换为 Map"></a>获取对象所有的 key / value，将对象转换为数组并转换为 Map</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="built_in">Object</span>.values(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br></pre></td></tr></table></figure>
<h2 id="Object-fromEntries-创建二维数组对象"><a href="#Object-fromEntries-创建二维数组对象" class="headerlink" title="Object.fromEntries 创建二维数组对象"></a>Object.fromEntries 创建二维数组对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;age&#x27;</span>, <span class="number">11</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="导出模块"><a href="#导出模块" class="headerlink" title="导出模块"></a>导出模块</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export 相当于 public</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getUser</span>(<span class="params">userDTO</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userDTO.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; UserService, Num &#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 HTML scrip 标签中 添加 type=”module” 导入模块</li>
<li>这里有两种导入方式，一种是单个导入，另一种是导入全部</li>
<li>as 是为变量加别名，类似 SQL 里的为字段加别名</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 单个导入</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; UserService <span class="keyword">as</span> user, Num <span class="keyword">as</span> num &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 导入全部</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> * <span class="keyword">as</span> UserService <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 打印整个对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(UserServiceALL);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 打印单个对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(num);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认导出通常是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;LEE&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ASD&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> * <span class="keyword">as</span> defaultUser <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(defaultUser.default.name);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 同样也可以为 default 取名</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> def &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 还能简化写法</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> def <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="封装批量导入，类似-Startup"><a href="#封装批量导入，类似-Startup" class="headerlink" title="封装批量导入，类似 Startup"></a>封装批量导入，类似 Startup</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js path&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>单独用一个 js 文件来导入</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> xxx <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> xxx <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> xxx <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="懒加载导入"><a href="#懒加载导入" class="headerlink" title="懒加载导入"></a>懒加载导入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> User <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒加载导入</span></span><br><span class="line"><span class="comment">// 返回一个 Promise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;path&#x27;</span>).then(</span><br><span class="line">  (<span class="built_in">module</span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">module</span>.User();</span><br><span class="line">  &#125;,</span><br><span class="line">  (errMsg) =&gt; &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="includes，取代-indexOf"><a href="#includes，取代-indexOf" class="headerlink" title="includes，取代 indexOf"></a>includes，取代 indexOf</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">33</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h1 id="幂运算，Math-pow-的语法糖"><a href="#幂运算，Math-pow-的语法糖" class="headerlink" title="幂运算，Math.pow 的语法糖"></a>幂运算，Math.pow 的语法糖</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">10</span>); <span class="comment">// 2 的 10 次方</span></span><br></pre></td></tr></table></figure>
<h1 id="异步，类似-C-的异步"><a href="#异步，类似-C-的异步" class="headerlink" title="异步，类似 C# 的异步"></a>异步，类似 C# 的异步</h1><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul>
<li>async 默认返回值为一个成功的 Promise 对象</li>
<li>只有主动抛出错误才会返回失败的 Promise 对象</li>
<li>开发情况下会手动返回一个新的 Promise 对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async 必须在前面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><ul>
<li>像写 C# 异步方法一样使用即可</li>
<li>使用 try…catch 可以捕获 reject 错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">Math</span>.random() * <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">50</span>) &#123;</span><br><span class="line">      resolve(a);</span><br><span class="line">    &#125;</span><br><span class="line">    reject(<span class="string">&#x27;小于50&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = &#123;</span><br><span class="line">  GetUser,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ExceptionCaller</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> func();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = ExceptionCaller(map.GetUser);</span><br><span class="line">  result.then(</span><br><span class="line">    (okMsg) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(okMsg);</span><br><span class="line">    &#125;,</span><br><span class="line">    (errMsg) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Get();</span><br></pre></td></tr></table></figure>
<h1 id="正则表达式扩展"><a href="#正则表达式扩展" class="headerlink" title="正则表达式扩展"></a>正则表达式扩展</h1><h2 id="一般情况下的正则"><a href="#一般情况下的正则" class="headerlink" title="一般情况下的正则"></a>一般情况下的正则</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;嘿嘿123哈哈&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/嘿嘿([0-9]*)哈哈/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure>
<h2 id="es9-为正则变量命名"><a href="#es9-为正则变量命名" class="headerlink" title="es9 为正则变量命名"></a>es9 为正则变量命名</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;嘿嘿123哈哈&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/嘿嘿(?&lt;num&gt;[0-9]*)哈哈/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str).groups.num);</span><br></pre></td></tr></table></figure>
<h2 id="正向匹配"><a href="#正向匹配" class="headerlink" title="正向匹配"></a>正向匹配</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;你好111哈哈456嘿嘿HHH&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取嘿嘿前面的 456</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/[0-9]*(?=嘿嘿)/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure>
<h2 id="反向匹配"><a href="#反向匹配" class="headerlink" title="反向匹配"></a>反向匹配</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;你好111哈哈456嘿嘿HHH&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取你好后面的 111</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(?&lt;=你好)[0-9]*/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure>
<h2 id="dotall-模式"><a href="#dotall-模式" class="headerlink" title="dotall 模式"></a>dotall 模式</h2><ul>
<li>增加了一个 s 能匹配换行符的功能，在多行文本很好用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/./</span>s;</span><br></pre></td></tr></table></figure>
<h2 id="matchAll"><a href="#matchAll" class="headerlink" title="matchAll"></a>matchAll</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/./</span>s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的匹配结果并转换为 Enumerable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = str.matchAll(reg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> data <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="trimStart-trimEnd，类似-C-的-trim"><a href="#trimStart-trimEnd，类似-C-的-trim" class="headerlink" title="trimStart / trimEnd，类似 C# 的 trim"></a>trimStart / trimEnd，类似 C# 的 trim</h1><ul>
<li>去除空白</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;     aaa     &#x27;</span>;</span><br><span class="line"></span><br><span class="line">connsole.log(str.trimStart());</span><br><span class="line">connsole.log(str.trimEnd());</span><br></pre></td></tr></table></figure>
<h1 id="flat-将多维数组降维"><a href="#flat-将多维数组降维" class="headerlink" title="flat 将多维数组降维"></a>flat 将多维数组降维</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()); <span class="comment">// 2 转 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat()); <span class="comment">// 3 转 2</span></span><br><span class="line"></span><br><span class="line">flat(value); <span class="comment">// value 是深度，表示将 n 层维度转为一维</span></span><br></pre></td></tr></table></figure>
<h1 id="私有字段"><a href="#私有字段" class="headerlink" title="私有字段"></a>私有字段</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 私有字段需要加 # 号</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  #name;</span><br><span class="line">  #age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="可选链操作符，就是-C-里的"><a href="#可选链操作符，就是-C-里的" class="headerlink" title="可选链操作符，就是 C# 里的 ?."></a>可选链操作符，就是 C# 里的 ?.</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果 userDTO 不为空则返回它的 name</span></span><br><span class="line"><span class="comment">// 不存在则返回 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = userDTO?.name;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
</search>
